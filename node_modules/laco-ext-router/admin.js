"use strict";
const admin = lacoLib('./libs/admin');
const logger = lacoLib('./libs/logger');
const userResource = lacoLib('./libs/user/resource');
let express = null;
let router = null;

exports.init = laco => {
    express = laco.express;
    router = express.Router();
}

exports.middleware = () => {
    router.use((req, res, next) => {
        let _user = req.session.user ? new userResource(req.session.user) : null;
        if(_user) {
            if(_user.can('access_admin')) return next();
            req.flash('danger', 'You don\'t have permission to access this area');
        } 
        return res.redirect(`/login?back=${encodeURIComponent(req.originalUrl)}`);
    });
    router.get('/:module?/:action?/:extra([a-zA-Z0-9\-\_\/]+)?', function(req, res) {
        let adminModule = req.params.module || 'dashboard';
        let adminAction = req.params.action || 'main';
        let adminParams = req.params.extra || {};

        if(!admin.adminObjects[adminModule]) return res.end('Not found!');
        if(!admin.adminObjects[adminModule][adminAction]) return res.end('Not found!');

        return admin.adminObjects[adminModule][adminAction](req, res);

        // admin.adminObjects[adminModule].main(req, res);
        // if(typeof req.params.module != 'undefined')
        //     g.admin.module = req.params.mod_name;
        // else
        //     g.admin.module = 'dashboard';

        // if(typeof req.params.mod_action != 'undefined')
        //     g.admin.action = req.params.mod_action;
        // else {
        //     g.admin.action = 'main';
        // }
        // g.session.userInfo = req.session.userInfo;
        // var adminModule = require(ADMIN_MODULR_DIR + g.admin.module + '/' + g.admin.module + '.js')('admin***' + g.admin.module, req, res, app);
        // adminModule[g.admin.action](req, res);
    });
    return router;
}