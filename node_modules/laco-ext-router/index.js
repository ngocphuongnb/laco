"use strict";
const path = require('path');
const eventEmitter = lacoLib('./libs/eventEmitter');
const router = lacoLib('./libs/router');
const logger = lacoLib('./libs/logger');
const adminRouter = require('./admin');
const Extension = lacoLib('./libs/extension');
const loadedExts = lacoLib('./libs/ext_loader').loadedExts;

let handleHomeGet = (req, res) => {
    res.send(res.abc + ' home handler outside');
}

class ExtRouter extends Extension {
    constructor(laco) {
        super(__dirname, 'Router ext');
        this.registerViews([
            'login',
            'register'
        ]);

        const loginAsset = path.join(LACO_ROOT, 'data/assets/admin');
        const depPaths = [
            path.join(loginAsset, 'plugins/material-design-iconic-font/css/material-design-iconic-font.min.css'),
            path.join(loginAsset, 'plugins/bootstrap/css/bootstrap.css'),
            path.join(loginAsset, 'plugins/node-waves/waves.css'),
            path.join(loginAsset, 'plugins/animate-css/animate.css'),
            path.join(loginAsset, 'css/style.css'),
            path.join(loginAsset, 'css/custom.css'),
            path.join(loginAsset, 'plugins/jquery/jquery.min.js'),
            path.join(loginAsset, 'plugins/bootstrap/js/bootstrap.js'),
            path.join(loginAsset, 'plugins/node-waves/waves.js'),
            path.join(loginAsset, 'plugins/jquery-validation/jquery.validate.js'),            
            path.join(loginAsset, 'js/admin.js'),
            path.join(loginAsset, 'js//pages/examples/sign-in.js')
        ];
        let loginDeps = [];
        for(let dep of depPaths) {
            loginDeps.push({
                path: dep,
                'if-flag': 'laco-login'
            });
        }
        this.addDependencies(loginDeps);
        this.addPageFlags('laco-login');

        adminRouter.init(laco);
        laco.app.use('/' + laco.nconf.get('APP_ADMIN_DIR'), adminRouter.middleware());

        router.register({
            name: 'home',
            label: 'Home page',
            priority: 2,
            path: '/',
            get: handleHomeGet,
        });
        router.register({
            name: 'login',
            label: 'Login',
            priority: 3,
            path: '/login',
            get: (req, res, next) => loadedExts.router.login(req, res, next),
            post: (req, res, next) => this.login(req, res, next)
        });
    }
    
    login(req, res) {
        if(req.method == 'GET') return this.view('login', {}, req, res);
        req.flash('danger', 'Invalid username or password');
        res.redirect(req.originalUrl);
    }
}

module.exports = ExtRouter;