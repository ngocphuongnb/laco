'use strict';

const BaseController = lacoLib('libs/controller/base');
const helper = lacoLib('libs/helper');

class Chat extends BaseController {
    constructor(manager, controller) {
        super(manager, controller);
    }

    index(req, res, next) {
        console.log(helper.decrypt('5496487ea47c9ec72ac3b0314da03b57:04e8039c79a6cf33d4640478b96dfb77'))
        res.end(`<!doctype html>
        <html>
            <head>
                <title>Socket.IO chat</title>
                <style>
                    * { margin: 0; padding: 0; box-sizing: border-box; }
                    body { font: 13px Helvetica, Arial; }
                    form { background: #000; padding: 3px; position: fixed; bottom: 0; width: 100%; }
                    form input { border: 0; padding: 10px; width: 90%; margin-right: .5%; }
                    form input[type="submit] { width: 9%; background: rgb(130, 224, 255); border: none; padding: 10px; }
                    #messages { list-style-type: none; margin: 0; padding: 0; }
                    #messages li { padding: 5px 10px; }
                    #messages li:nth-child(odd) { background: #eee; }
                </style>
            </head>
            <body>
                <ul>
                    <li><a class="discussion-item" href="#" data-identity="${helper.encrypt('1234566_1234568_0')}">
                        ${helper.encrypt('1234566,1234568,dscsdc')}</a>
                    </li>
                    <li><a class="discussion-item" href="#" data-identity="${helper.encrypt('1234566_1234569_1')}">
                        ${helper.encrypt('1234566_1234569_1')}</a>
                    </li>
                </ul>

                <div class="hjchat-msg-wrapper">
                    <div class="hjchat-msg-template">
                        <ul class="hjchat-msgs"></ul>
                    </div>
                </div>

                <form action="" class="hjchat-form">
                    <input id="m" class="hjchat-input" autocomplete="off" />
                    <input type="submit" value="Send" />
                </form>
                
                <script src="https://code.jquery.com/jquery-1.11.1.js"></script>
                <script src="/socket/socket.io.js"></script>
                <script src="/assets/HJAsset/js/chat.min.js"></script>
            </body>
        </html>`);
    }
}

//php example
// define('AES_METHOD', 'aes-256-cbc');

// function encrypt($message, $password)
// {
//     // Check versions with Heartbleed vulnerabilities
//     if (OPENSSL_VERSION_NUMBER <= 268443727) {
//         throw new RuntimeException('OpenSSL Version too old');
//     }

//     $iv_size        = openssl_cipher_iv_length(AES_METHOD);
//     $iv             = openssl_random_pseudo_bytes($iv_size);
//     $ciphertext     = openssl_encrypt($message, AES_METHOD, $password, OPENSSL_RAW_DATA, $iv);
//     $ciphertext_hex = bin2hex($ciphertext);
//     $iv_hex         = bin2hex($iv);

//     return "$iv_hex:$ciphertext_hex";
// }

// function decrypt($ciphered, $password) {
//     $iv_size    = openssl_cipher_iv_length(AES_METHOD);
//     $iv         = mb_substr($ciphered, 0, $iv_size, '8bit');
//     $ciphertext = mb_substr($ciphered, $iv_size+1, strlen($ciphered), '8bit');

//     return openssl_decrypt($ciphertext, AES_METHOD, $password, OPENSSL_RAW_DATA, $iv);
// }

// echo encrypt($message, $key);

module.exports = Chat;