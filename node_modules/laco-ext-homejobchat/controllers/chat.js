'use strict';

const BaseController = lacoLib('libs/controller/base');
const helper = lacoLib('libs/helper');

class Chat extends BaseController {
    constructor(manager, controller) {
        super(manager, controller);
    }

    index(req, res, next) {
        res.end(`<!doctype html>
        <html>
            <head>
                <title>Socket.IO chat</title>
                <style>
                    * { margin: 0; padding: 0; box-sizing: border-box; }
                    body { font: 13px Helvetica, Arial; }

                    html,body,.hjchat-conversation-list,.hjchat-conversation-container {
                        height: 100%
                    }

                    .hjchat-conversation-list {
                        width: 300px;
                        background: #f1f1f1;
                        float: left;
                    }

                    .hjchat-conversation-container {
                        width: Calc(100% - 300px);
                        background: #FFF;
                        float: left;
                    }

                    .hjchat-msg-wrapper {
                        height: Calc(100% - 40px);
                    }

                    .hjchat-conversation-trigger {
                        padding: 5px 10px;
                        font-size: 14px;
                        display: block;
                        background: #e2e2e2;
                        cursor: pointer;
                    }

                    .hjchat-conversation-trigger:hover,.hjchat-conversation-trigger.active {
                        background: #353535;
                        color: #FFF;
                    }

                    .hjchat-conversation-item {
                        padding: 10px;
                        height: 100%;
                        overflow-y: auto;
                    }

                    .hjchat-conversation-item .hjchat-msgs {
                        list-style: none
                    }

                    .hjchat-form { background: #000; padding: 3px; width: 100%; height:40px }
                    .hjchat-input { border: 0; padding: 10px; width: 90%; margin-right: .5%; }
                    .hjchat-submit { width: 9%; background: rgb(130, 224, 255); border: none; padding: 10px; }
                    #messages { list-style-type: none; margin: 0; padding: 0; }
                    #messages li { padding: 5px 10px; }
                    #messages li:nth-child(odd) { background: #eee; }
                </style>
            </head>
            <body>
                <ul class="hjchat-conversation-list">
                    <li><span class="hjchat-conversation-trigger" data-identity="123">123</span></li>
                    <li><span class="hjchat-conversation-trigger" data-identity="456">456</span></li>
                </ul>

                <div class="hjchat-conversation-container">
                    <div class="hjchat-msg-wrapper">
                        <div class="hjchat-msg-template">
                            <ul class="hjchat-msgs"></ul>
                        </div>
                    </div>

                    <form action="" class="hjchat-form">
                        <input class="hjchat-input" autocomplete="off" />
                        <input type="submit" class="hjchat-submit" value="Send" />
                    </form>
                </div>
                
                <script src="https://code.jquery.com/jquery-1.11.1.js"></script>
                <script src="/socket/socket.io.js"></script>
                <script src="/assets/HJAsset/js/chat.min.js"></script>
            </body>
        </html>`);
    }
}

//php example
// define('AES_METHOD', 'aes-256-cbc');

// function encrypt($message, $password)
// {
//     // Check versions with Heartbleed vulnerabilities
//     if (OPENSSL_VERSION_NUMBER <= 268443727) {
//         throw new RuntimeException('OpenSSL Version too old');
//     }

//     $iv_size        = openssl_cipher_iv_length(AES_METHOD);
//     $iv             = openssl_random_pseudo_bytes($iv_size);
//     $ciphertext     = openssl_encrypt($message, AES_METHOD, $password, OPENSSL_RAW_DATA, $iv);
//     $ciphertext_hex = bin2hex($ciphertext);
//     $iv_hex         = bin2hex($iv);

//     return "$iv_hex:$ciphertext_hex";
// }

// function decrypt($ciphered, $password) {
//     $iv_size    = openssl_cipher_iv_length(AES_METHOD);
//     $iv         = mb_substr($ciphered, 0, $iv_size, '8bit');
//     $ciphertext = mb_substr($ciphered, $iv_size+1, strlen($ciphered), '8bit');

//     return openssl_decrypt($ciphertext, AES_METHOD, $password, OPENSSL_RAW_DATA, $iv);
// }

// echo encrypt($message, $key);

module.exports = Chat;