'use strict';

const mongoose = require('mongoose');
const autoIncrement = require('mongoose-auto-increment');
const logger = lacoLib('libs/logger');
const helper = lacoLib('libs/helper');
const BaseExtension = lacoLib('libs/extension/base');
const HJChatEvents = require('./assets/js/shared').ChatEvents;
const HJApp = require('./app');
const db = require('./models/db');
mongoose.Promise = Promise;

class LacoHomeJobChat extends BaseExtension {
    constructor(laco) {
        super(laco);
        this.name = 'homejobchat';
        this.laco.subAppManager.register('/chat', HJApp(this));

        this.laco.socket.on('connection', socket => {
            socket.on('identity', identity => {
                socket.join(identity);
            });

            socket.on(HJChatEvents.CREATE_CHAT_MSG, data => {
                let identity = data.identity || null;
                let userIdt = data.userIdt || null;
                let msg = data.msg || null;
                if (!identity || !msg) return;

                let conversationId = null;
                let userId = null;
                try {
                    conversationId = parseInt(helper.decrypt2(identity));
                    userId = parseInt(helper.decrypt2(userIdt));
                } catch (e) {}

                if (!conversationId || !userId) return;

                let message = new db.models.message({
                    conversationid: conversationId,
                    userid: userId,
                    content: msg
                });

                message.save().then(() => console.log('success save user msg')).catch(e => console.log('Error save msg', e));

                this.laco.socket.sockets.in(data.identity).emit(HJChatEvents.NEW_CHAT_MSG, {
                    identity: identity,
                    userid: userId,
                    content: msg,
                    created_date: new Date()
                });
            });
        });

        mongoose.connect(process.env.HOMEJOB_CHAT_DB_CONNECTION, {}, err => {
            if (err) {
                return logger.error('[ext.homejobchat] Cannot connect to database: ', err);
            }

            logger.info('[ext.homejobchat] Connected to database...');
            autoIncrement.initialize(mongoose.connection);

            require('./models/user');
            require('./models/message');
            require('./models/conversation');
            this.laco.emit('ext.homejobchat.init');
        });
    }
}

module.exports = LacoHomeJobChat;