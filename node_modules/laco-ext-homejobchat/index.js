'use strict';

const _ = require('lodash');
const mongoose = require('mongoose');
const autoIncrement = require('mongoose-auto-increment');
const logger = lacoLib('libs/logger');
const helper = lacoLib('libs/helper');
const BaseExtension = lacoLib('libs/extension/base');
const HJChatEvents = require('./assets/js/shared').ChatEvents;
const HJApp = require('./app');
const db = require('./models/db');
const libs = require('./libs');
mongoose.Promise = Promise;

class LacoHomeJobChat extends BaseExtension {
    constructor(laco) {
        super(laco);
        this.name = 'homejobchat';
        this.laco.subAppManager.register('/chat', HJApp(this));
        this.conversations = {};

        this.laco.socket.on('connection', socket => {
            socket.on(HJChatEvents.USER_IDENTITY, identity => {
                socket.join(identity);
            });

            socket.on(HJChatEvents.USER_NOTIFICATION, userIdentity => {
                socket.join(`notification_${userIdentity}`);
            });

            socket.on(HJChatEvents.CREATE_CHAT_MSG, data => {
                let identity = data.identity || null;
                let userIdentity = data.userIdentity || null;
                let sender = data.sender || '';
                let msg = data.msg || null;
                if (!identity || !msg) return;

                let conversationName = '';
                let conversationId = null;
                let userId = null;
                try {
                    conversationId = parseInt(helper.decrypt2(identity));
                    userId = parseInt(helper.decrypt2(userIdentity));
                    sender = helper.decrypt2(sender);
                } catch (e) {
                    logger.error(e);
                }

                if (!conversationId || !userId) return;

                let getConversationData = null;
                if (!this.conversations[conversationId]) {
                    getConversationData = () => {
                        return new Promise((resolve, reject) => {
                            db.models.conversation.findOne({
                                    intId: conversationId
                                })
                                .then(conversation => {
                                    this.conversations[conversationId] = conversation;
                                    resolve(conversation);
                                })
                                .catch(err => reject(err));
                        })
                    };
                } else {
                    getConversationData = () => Promise.resolve(this.conversations[conversationId]);
                }

                getConversationData().then(conversation => {
                    let message = new db.models.message({
                        conversationid: conversationId,
                        userid: userId,
                        content: msg
                    });

                    let sendNotifyToUserId = conversation.creatorid == userId ? conversation.targetid : conversation.creatorid;

                    message.save().then(() => {
                        this.laco.socket.sockets.in(`notification_${helper.encrypt2(sendNotifyToUserId.toString())}`)
                            .emit(HJChatEvents.USER_NEW_NOTIFICATION, {
                                identity: identity,
                                sender: sender,
                                content: msg,
                                created_date: new Date()
                            });
                    }).catch(e => console.log('Error save msg', e));

                    this.laco.socket.sockets.in(data.identity).emit(HJChatEvents.NEW_CHAT_MSG, {
                        identity: identity,
                        userid: userId,
                        content: msg,
                        created_date: new Date()
                    });
                }).catch(err => {
                    this.laco.socket.sockets.in(data.identity).emit(HJChatEvents.NEW_CHAT_MSG, {
                        identity: identity,
                        userid: 0,
                        content: 'Cannot find conversation',
                        created_date: new Date()
                    });
                });
            });
        });

        mongoose.connect(process.env.HOMEJOB_CHAT_DB_CONNECTION, {}, err => {
            if (err) {
                return logger.error('[ext.homejobchat] Cannot connect to database: ', err);
            }

            logger.info('[ext.homejobchat] Connected to database...');
            autoIncrement.initialize(mongoose.connection);

            require('./models/user');
            require('./models/message');
            require('./models/conversation');
            this.laco.emit('ext.homejobchat.init');
        });
    }
}

module.exports = LacoHomeJobChat;