'use strict';

// if (typeof window.HJChat !== 'undefined') {
//     throw new Error('[HJCHAT] HJChat was loaded, it should be loaded only one time!');
// }

if (typeof HJConversation === 'undefined') {
    throw new Error('[HJCHAT] HJChat logger not found!');
}

if (typeof HJLogger === 'undefined') {
    throw new Error('[HJCHAT] HJChat logger not found!');
}

function HJChat(options) {

    if (typeof jQuery == 'undefined') {
        throw new Error('[HJCHAT] JQuery is required for HJChat to run...')
    }

    if (typeof io == 'undefined') {
        throw new Error('[HJCHAT] SocketIO is required for HJChat to run...')
    }

    if (typeof options !== 'undefined' && typeof options != 'object') {
        return new Error('[HJCHAT] Invalid options:', options);
    }

    this.options = Object.assign(this.options, options);
}


HJChat.logger = new HJLogger({ name: 'HJChatLogger' });
HJChat.prototype.logger = new HJLogger({ name: 'HJChat' });
HJChat.prototype.socket = null;
HJChat.prototype.events = {};
HJChat.prototype.conversations = {};
HJChat.prototype.formElm = {};
HJChat.prototype.active = {
    conversation: null,
    users: []
};

HJChat.prototype.options = {
    'socket.host': window.location.origin,
    'socket.path': '/socket',
    'socket.resource': '/socket',
    'ui.conversation.triggerSelector': '.hjchat-conversation-trigger',
    'ui.conversation.wrapperSelector': '.hjchat-msg-wrapper',
    'ui.conversation.templateSelector': '.hjchat-msg-template',
    'ui.conversation.triggerIdPrefix': 'hjdicussionitem-',
    'ui.conversation.userInfo': function(identity, userIdentity, conversationElm) {},
    'ui.conversation.loadMsg': function(identity, userIdentity, conversationElm) {},
    'ui.conversation.itemClass': 'hjchat-conversation-item',
    'ui.conversation.idPrefix': 'hj-conversation-',
    'ui.form': 'form.hjchat-form',
    'ui.form.inputSelector': '.hjchat-input',
    'ui.msg.listSelector': '.hjchat-msgs',
    'ui.msg.template': function(msg) {},
    'ui.msg.onnew': function(msg, isInActivatedConversaton) {},
};

HJChat.prototype.config = function(options) {
    if (typeof options !== 'object') {
        return this.logger.error('[Config] Invalid options:', options);
    }
    this.options = Object.assign(this.options, options);
}

HJChat.prototype.isLoadedConversation = function(identity) {
    return this.conversations[identity] ? true : false;
}

HJChat.prototype.scrollToBottom = function(identity) {
    var elementid = this.options['ui.conversation.idPrefix'] + identity;
    $('#' + elementid).scrollTop($('#' + elementid)[0].scrollHeight);
}

HJChat.prototype.init = function() {
    var _this = this;
    _this.formElm = $(this.options['ui.form']);

    if ($(this.options['ui.conversation.templateSelector']).length) {
        $(this.options['ui.conversation.templateSelector']).hide();
    }

    this.socket = io(this.options['socket.host'], {
        path: this.options['socket.path'],
        resource: this.options['socket.resource']
    });

    this.socket.on('connect', function() {
        _this.socket.emit(_this.events.USER_NOTIFICATION, _this.options.userIdentity);
        _this.listen();
    });
}

HJChat.prototype.listen = function() {
    var _this = this;
    var allTriggerElms = $(this.options['ui.conversation.triggerSelector']);

    $.each(allTriggerElms, function(index, triggerElm) {
        triggerElm = $(triggerElm);
        var triggerIdPrefix = _this.options['ui.conversation.triggerIdPrefix'];
        var conversationIdentity = triggerElm.data('identity') || (triggerElm.attr('id') || '').replace(triggerIdPrefix, '');
        _this.conversations[conversationIdentity] = new HJConversation({
            triggerElm: triggerElm,
            identity: conversationIdentity,
            sender: triggerElm.data('sender'),
            active: !!triggerElm.data('active'),
            new: !!triggerElm.data('new'),
        }, _this);
    });

    var currentConversationIdentity = window.location.hash.replace('#', '');
    if (currentConversationIdentity && _this.conversations[currentConversationIdentity]) {
        _this.conversations[currentConversationIdentity].open();
    }

    this.formElm.on('submit', function(event) {
        event.preventDefault();
        var inputField = $(_this.options['ui.form.inputSelector'], $(this));
        var msg = inputField.val();
        var identity = $(this).data('identity');
        var sender = $(this).data('sender');

        if (!identity) {
            return _this.logger.error('Invalid chat identity');
        }

        if (msg) {
            _this.socket.emit(_this.events.CREATE_CHAT_MSG, {
                identity: identity,
                userIdentity: _this.options.userIdentity,
                sender: sender,
                msg: msg
            });
        }
        inputField.val('');
        return false;
    });

    _this.socket.on(_this.events.USER_NEW_NOTIFICATION, function(data) {
        _this.options['ui.msg.onnew'](data, false);
    });

    _this.socket.on(_this.events.NEW_CHAT_MSG, function(data) {
        var msg = data.msg;
        var identity = data.identity;

        if (typeof _this.options['ui.msg.template'] == 'string') {
            msg = _this.options['ui.msg.template'].replace(/@msg/g, msg)
        }

        if (typeof _this.options['ui.msg.template'] == 'function') {
            msg = _this.options['ui.msg.template'](data);
        }

        $('#' + _this.options['ui.conversation.idPrefix'] + identity + ' ' + _this.options['ui.msg.listSelector']).append(msg);
        _this.scrollToBottom(identity);
    });
}