if (typeof window.HJChat === 'undefined') {
    function HJLogger(options) {
        this.name = 'HJLogger';
        if (typeof options == 'object') {
            Object.assign(this, options);
        }
    };
    HJLogger.prototype.info = function(msg, extra) {
        console.log('[' + this.name + ' ' + msg);
        if (extra) {
            console.log(extra);
        }
    };
    HJLogger.prototype.warn = function(msg, extra) {
        console.warn('[' + this.name + ' ' + msg, extra);
        if (extra) {
            console.warn(extra);
        }
    };
    HJLogger.prototype.error = function(msg, extra) {
        throw new Error('[' + this.name + ' ' + msg + ' ' + JSON.stringify(extra));
        if (extra) {
            console.error(extra);
        }
    };

    function HJChat(options) {
        if (typeof jQuery == 'undefined') {
            this.logger('jQuery is required for HJChat to run...')
        }
        if (typeof io == 'undefined') {
            this.logger('SocketIO is required for HJChat to run...')
        }
        if (typeof options !== 'undefined' && typeof options != 'object') {
            return this.logger.error('Invalid options:', options);
        }
        this.options = Object.assign(this.options, options);
    }

    HJChat.logger = new HJLogger({ name: 'HJChatLogger' });
    HJChat.prototype.logger = new HJLogger({ name: 'HJChat' });
    HJChat.prototype.options = {
        'socket.host': window.location.origin,
        'socket.path': '/socket',
        'socket.resource': '/socket',
        'ui.discussion.trigger': '.discussion-item',
        'ui.discussion.user_info': function(identity, discussionElm) {},
        'ui.discussion.load_msg': function(identity, discussionElm) {},
        'ui.discussion.wrapper': '.hjchat-msg-wrapper',
        'ui.discussion.template': '.hjchat-msg-template',
        'ui.discussion.item_class': 'hjchat-discussion-item',
        'ui.discussion.id_prefix': 'hj-discussion-',
        'ui.form': 'form.hjchat-form',
        'ui.form.input': '.hjchat-input',
        'ui.msg.list': '.hjchat-msgs',
        'ui.msg.template': '<li>@msg</li>',
    };
    HJChat.prototype.config = function(options) {
        if (typeof options !== 'object') {
            return this.logger.error('[Config] Invalid options:', options);
        }
        this.options = Object.assign(this.options, options);
    }

    HJChat.prototype.socket = null;
    HJChat.prototype.events = {};
    HJChat.prototype.loadedDiscussions = {};

    HJChat.prototype.isLoadedDiscussion = function(identity) {
        return this.loadedDiscussions[identity] ? true : false;
    }

    HJChat.prototype.init = function() {
        var _this = this;

        if ($(this.options['ui.discussion.template']).length) {
            $(this.options['ui.discussion.template']).hide();
        }

        this.socket = io(this.options['socket.host'], {
            path: this.options['socket.path'],
            resource: this.options['socket.resource']
        });
        this.socket.on('connect', function() {
            _this.listen();
        });
    }

    HJChat.prototype.listen = function() {
        var _this = this;
        var currentHash = window.location.hash;
        if (currentHash) {
            currentHash = currentHash.replace('#', '');
            this.openDiscussion(currentHash);
        }

        $(document).on('click', this.options['ui.discussion.trigger'], function(event) {
            var identity = $(this).data('identity') || $(this).attr('id').replace('hjdicussionitem-', '');
            event.preventDefault();
            _this.openDiscussion(identity);
        });

        $(document).on('submit', this.options['ui.form'], function(event) {
            event.preventDefault();
            var inputField = $(_this.options['ui.form.input'], $(this));
            var msg = inputField.val();
            var identity = $(this).data('identity');

            if (!identity) {
                return _this.logger.error('Invalid chat identity');
            }

            if (msg) {
                _this.socket.emit(_this.events.CREATE_CHAT_MSG, {
                    identity: identity,
                    msg: msg
                });
            }
            inputField.val('');
            return false;
        });

        _this.socket.on(_this.events.NEW_CHAT_MSG, function(data) {
            var msg = data.msg;
            var identity = data.identity;

            if (typeof _this.options['ui.msg.template'] == 'string') {
                msg = _this.options['ui.msg.template'].replace(/@msg/g, msg)
            }

            if (typeof _this.options['ui.msg.template'] == 'function') {
                msg = _this.options['ui.msg.template'](msg);
            }

            $('#' + _this.options['ui.discussion.id_prefix'] + identity + ' ' + _this.options['ui.msg.list']).append(msg);
        });
    }

    HJChat.prototype.openDiscussion = function(identity) {
        $(this.options['ui.form']).data('identity', identity);

        var currentHash = window.location.hash;
        if (currentHash) {
            currentHash = currentHash.replace('#', '');
        }

        if (currentHash != identity) {
            window.location.hash = identity;
        }

        if (!this.isLoadedDiscussion(identity)) {
            this.socket.emit('identity', identity);

            var discussionElm = $(this.options['ui.discussion.template']).clone();
            discussionElm.attr('id', this.options['ui.discussion.id_prefix'] + identity);
            discussionElm.addClass(this.options['ui.discussion.item_class']);
            discussionElm.removeClass(this.options['ui.discussion.template'].replace(/[\.#]/g, ''));
            $(this.options['ui.discussion.wrapper']).append(discussionElm);
            this.options['ui.discussion.user_info'](identity, discussionElm);
            this.options['ui.discussion.load_msg'](identity, discussionElm);
            this.loadedDiscussions[identity] = true;
        }

        $('.' + this.options['ui.discussion.item_class']).hide();
        $('#' + this.options['ui.discussion.id_prefix'] + identity).show();
    }
}