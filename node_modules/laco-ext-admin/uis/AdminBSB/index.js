'use strict';

const path = require('path');
const UIBase = lacoLib('libs/ui/base');
const logger = lacoLib('libs/logger');

class AdminBSB extends UIBase {
    constructor(manager, ui) {
        super(manager, ui, {});

        this.discovery(err => {
            this.laco.emit(!err ? 'ui.AdminBSB.loaded' : 'ui.AdminBSB.error', err);
        });

        this.addTasks([{
                name: 'prepare',
                description: 'Create UI output dir',
                cmd: 'mkdir',
                target: ['/js', '/css', '/images'],
            },
            {
                name: 'clean',
                description: 'Clear old output files',
                cmd: 'rm',
                target: ['/js/*', '/css/*', '/images/*'],
            },
            {
                name: 'buildAdminBSB',
                description: 'Build AdminBSB files',
                cmd: (cmd, task, callback) => {
                    let gulp = cmd.gulp;

                    console.log(this.extDir);

                    gulp.task('buildCommonStyle', cb => {
                        logger.info('  [ext.admin.ui.AdminBSB] Building AdminBSB style...');
                        let gulpObj = gulp.src([
                            path.join(this.extDir, 'node_modules/adminbsb-materialdesign/css/materialize.css'),
                            path.join(this.extDir, 'node_modules/adminbsb-materialdesign/css/style.min.css'),
                            path.join(this.extDir, 'node_modules/adminbsb-materialdesign/css/themes/all-themes.min.css')
                        ]);

                        if (process.env.NODE_ENV == 'production') {
                            gulpObj.pipe(cmd.gulpStripDebug()).pipe(cmd.gulpUglify());
                        }

                        return gulpObj
                            .pipe(cmd.gulpConcat('admin.min.css'))
                            .pipe(gulp.dest('/css'))
                    });

                    gulp.task('copyImage', cb => {
                        logger.info('  [ext.admin.ui.AdminBSB] Copying AdminBSB images...');
                        let gulpObj = gulp.src([
                            path.join(this.extDir, 'node_modules/adminbsb-materialdesign/images/*')
                        ]);

                        return gulpObj.pipe(gulp.dest('/images'));
                    });

                    gulp.task('buildCommonJS', cb => {
                        logger.info('  [ext.admin.ui.AdminBSB] Building AdminBSB js...');
                        let gulpObj = gulp.src([
                            path.join(this.extDir, 'node_modules/adminbsb-materialdesign/js/*'),
                        ]);

                        if (process.env.NODE_ENV == 'production') {
                            gulpObj.pipe(cmd.gulpStripDebug()).pipe(cmd.gulpUglify());
                        }

                        return gulpObj
                            .pipe(cmd.gulpConcat('admin.min.js'))
                            .pipe(gulp.dest('/js'))
                    });

                    gulp.task('alltasks', ['buildCommonStyle', 'copyImage', 'buildCommonJS'], cb => callback());
                    gulp.start.apply(gulp, ['alltasks']);
                }
            }
        ]);
    }
}

module.exports = AdminBSB;