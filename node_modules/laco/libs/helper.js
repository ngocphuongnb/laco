"use strict";
const _ = require('underscore');
const slug = require('slug');
const path = require('path');
const randomstring = require("randomstring");

global.lacoLib = moduleFile => require(path.join(LACO_ROOT, moduleFile));

global.lacoAsset = assetFile => path.join(LACO_ROOT, 'data/assets', assetFile);

global.bytesToSize = bytes => {
   let sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
   if (bytes == 0) return '0 Byte';
   let i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));
   return Math.round(bytes / Math.pow(1024, i), 2) + ' ' + sizes[i];
};

global.lang = str => str;

String.prototype.capitalizeFirstChar = function() {
    return this.charAt(0).toUpperCase() + this.slice(1);
}

const caller = () => {
    try {
        let err = new Error();
        let callerfile;
        let currentfile;

        let _prepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace =  (err, stack) => stack;

        err.stack.shift();
        currentfile = err.stack.shift();

        while (err.stack.length) {
            callerfile = err.stack.shift();
            if(currentfile !== callerfile) {
                Error.prepareStackTrace = _prepareStackTrace;
                return callerfile;
            }
        }
    } catch (err) {
    }
    return undefined;
}

const cleanUrl = str => slug(str);

class Paging {
    constructor(options) {
        this.options = options;    
    }

    config(options) {
        this.options = _.extend(this.options, options);
    };

    generate(options) {
        if(_.isObject(options)) this.options = _.extend(this.options, options);
        else this.options.page = parseInt(options) > 0 ? parseInt(options) : 1;
        this.options = _.extend({
            baseUrl: '/',
            page: 1,
            limit: 10,
            total: 0,
            activeClass: 'active',
            templates: {
                wrapper: `<ul class="pagination">@content</ul>`,
                first: `<li><a class="waves-effect" href="@link">«</a></li>`,
                last: `<li><a class="waves-effect" href="@link">»</a></li>`,
                item: `<li class="@active"><a class="waves-effect" href="@link">@text</a></li>`,
            },
            queries: {}
        }, this.options);

        let totalPage = Math.ceil(this.options.total/this.options.limit);

        let pageStr = '';
        let queryString = '';
        let btnClass = '';
        if(!_.isEmpty(this.options.queries)) {
            let queryArray = [];
            _.mapObject(this.options.queries, (v, k) => {
                if(v != null && v != 'null') {
                    if(_.isArray(v)) v.each(e => queryArray.push(k + '[]=' + e));
                    else queryArray.push(k + '=' + v);
                }
            });
            queryString = '?' + queryArray.join('&');
        }

        let part1_from = 1;
        let part1_to = parseInt(this.options.page) + 2;
        if(this.options.page > 2) part1_from = this.options.page - 2;

        if(this.options.page >= totalPage - 2 || part1_to > totalPage) part1_to = totalPage;

        pageStr += this.options.templates.first.replace('@link', `${this.options.baseUrl}${queryString}`);

        for(let i = part1_from; i <= part1_to; i++) {
            btnClass = (i == this.options.page) ? this.options.activeClass : '';
            pageStr += this.options.templates.item
                            .replace('@link', `${this.options.baseUrl}/page-${i}${queryString}`)
                            .replace('@text', i)
                            .replace('@active', btnClass);
        }
        
        pageStr += this.options.templates.last.replace('@link', `${this.options.baseUrl}/page-${totalPage}${queryString}`);
        return this.options.templates.wrapper.replace('@content', pageStr);
    }  
}

exports.randomstring = randomstring;
exports.caller = caller;
exports.cleanUrl = cleanUrl;
exports.Paging = Paging;