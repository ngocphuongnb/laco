"use strict";
const slug = require('slug');
const path = require('path');
const randomstring = require("randomstring");

global.lacoLib = moduleFile => require(path.join(LACO_ROOT, moduleFile));

global.lacoAsset = assetFile => path.join(LACO_ROOT, 'data/assets', assetFile);

global.bytesToSize = bytes => {
   let sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
   if (bytes == 0) return '0 Byte';
   let i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));
   return Math.round(bytes / Math.pow(1024, i), 2) + ' ' + sizes[i];
};

global.lang = str => str;

String.prototype.capitalizeFirstChar = function() {
    return this.charAt(0).toUpperCase() + this.slice(1);
}

const caller = () => {
    try {
        let err = new Error();
        let callerfile;
        let currentfile;

        let _prepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace =  (err, stack) => stack;

        err.stack.shift();
        currentfile = err.stack.shift();

        while (err.stack.length) {
            callerfile = err.stack.shift();
            if(currentfile !== callerfile) {
                Error.prepareStackTrace = _prepareStackTrace;
                return callerfile;
            }
        }
    } catch (err) {
    }
    return undefined;
}

const cleanUrl = str => slug(str);

const paging = options => {
    options = _.extend({
        baseUrl: '/',
        currentPage: 1,
        perPage: 10,
        total: 0,
        activeClass: 'active',
        queries: {}
    }, options);

    let totalPage = Math.ceil(options.total/options.perPage);

    let pageStr = '';
    let queryString = '';
    let btnClass = '';
    if(!_.isEmpty(options.queries)) {
        let queryArray = [];
        _.mapObject(options.queries, (v, k) => {
            if(v != null && v != 'null') {
                if(_.isArray(v)) v.each(e => queryArray.push(k + '[]=' + e));
                else queryArray.push(k + '=' + v);
            }
        });
        queryString = '?' + queryArray.join('&');
    }

    let part1_from = 1;
    let part1_to = parseInt(options.currentPage) + 3;
    if(options.currentPage > 3) part1_from = options.currentPage - 3;

    if(options.currentPage >= parseInt(totalPage) - 3) part1_to = totalPage;

    pageStr += `<a class="waves-effect waves-light btn" href="${options.baseUrl}${queryString}">«</a>`;
    for(let i = part1_from; i <= part1_to; i++) {
        btnClass = (i == options.currentPage) ? ' ' + options.activeClass : '';
        pageStr += `<a class="waves-effect waves-light btn${btnClass}" href="${options.baseUrl}/page-${i}${queryString}">${i}</a>`;
    }
    pageStr += `<a class="waves-effect waves-light btn" href="${options.baseUrl}/page-${totalPage}${queryString}">»</a>`;
    return pageStr;
};

exports.randomstring = randomstring;
exports.caller = caller;
exports.cleanUrl = cleanUrl;
exports.paging = paging;