"use strict";

const shell = require('shelljs');
const async = require('async');
const _ = require('underscore');
const glob = require('glob');
const path = require('path');
const jsonfile = require('jsonfile');
const logger = require('./logger');

let loadedExts = {};
let installedExts = {};

let findRootPackageLocation = (type, callback) => {
    let supportedTypes = {
        global: 'npm root -g',
        local: 'npm root'
    };
    if(!supportedTypes[type]) return callback(null, null);
    shell.exec(supportedTypes[type], {silent:true}, (code, stdout, stderr) => {
        if(stdout) return callback(null, stdout.split('\n')[0]);
        return callback(null, null);
    });
};

let getLacoPackageRoots = () => {
    if(!process.env.LACO_PACKAGE_ROOTS) process.env.LACO_PACKAGE_ROOTS = [];
    return new Promise((resolve, reject) => {
        async.map(['local', 'global', 'none'], findRootPackageLocation, (err, locations) => {
            locations = _.union(process.env.LACO_PACKAGE_ROOTS, locations).filter(loc => {
                if(loc && _.isString(loc)) return loc;
            });
            return resolve(locations);
        });
    });
}

let scanLacoPacksFromDir = (dir, callback) => {
    glob(`${dir}/laco-ext-*`, (err, packs) => {
        if(err) {
            logger.error(`Scan laco package error: ${dir}`);
            logger.error(err);
            packs = [];
        }
        return callback(null, packs);
    });
}

let getAvailableLacoPackages = callback => {
    let _lacoPacks = {};
    let lacoPacks = [];
    getLacoPackageRoots().then(lacoPackRoots => {
        async.mapLimit(lacoPackRoots, 1, scanLacoPacksFromDir, (err, _packArrs) => {
            if(err) {
                logger.error(`scanLacoPacksFromDir error: ${err}`);
                _packArrs = [];
            }
            let allPacks = [];
            _.each(_packArrs, packs => allPacks = _.union(allPacks, packs));
            _.each(allPacks, pack => {
                let packName = path.basename(pack);
                if(!_lacoPacks[packName]) _lacoPacks[packName] = pack;
            });

            for(let packName in _lacoPacks) lacoPacks.push(_lacoPacks[packName]);
            callback(null, lacoPacks);
        });
    });
}

let loadAvailablePackages =  (packs, callback) => {
    let loadPackInfo = (packDir, cb) => {
        jsonfile.readFile(packDir + '/package.json', function(err, obj) {
            if(err) return callback(null, null);
            obj.location = packDir;
            return cb(null, obj);
        });
    };

    async.map(packs, loadPackInfo, (err, loadedPacks) => {
        if(err) {
            logger.error('Error loading Laco package: ' + err);
            loadedPacks = [];
        }
        callback(null, loadedPacks);
    });
};

let loadAvailablePackagesJson = callback => {
    async.waterfall([
        getAvailableLacoPackages,
        loadAvailablePackages
    ], (err, availableExts) => {
        if(err) {
            logger.error('loadAvailablePackagesJson error: ' + err);
            availableExts = []
        }
        callback(null, availableExts);
    });
};

let loadInstalledExts = (extJsonFile, loadExtCallback) => {
    jsonfile.readFile(extJsonFile, function(err, appExtObj) {
        if(err) {
            appExtObj = {installed: {}};
            logger.error('Error reading Laco extensions file!');
        }
        if(!_.isObject(appExtObj.installed)) appExtObj.installed = {};
        loadAvailablePackagesJson((err, availableExts) => {
            let installedExtFiles = [];
            if(err) availableExts = [];
            _.each(availableExts, extObj => {
                let extName = extObj.name.replace('laco-ext-', '');
                if(appExtObj.installed[extName]) {
                    installedExtFiles.push(path.join(extObj.location, extObj.main));
                }
            });
            async.map(installedExtFiles, (extFile, callback) => {
                let extBaseName = path.basename(path.dirname(extFile)).replace('laco-ext-', '');
                try {
                    loadedExts[extFile] = require(extFile);
                    callback(null, extBaseName);
                }
                catch(err) {
                    logger.error(extBaseName + ' ext cannot be loaded: ');
                    logger.error(err);
                    callback(null, null);
                }
            }, (err, _installedExts) => {
                if(err) {
                    logger.console(err);
                    _installedExts = [];
                }
                _installedExts = _installedExts.filter(ext => {
                    return ext != null;
                });
                installedExts = _installedExts;
                loadExtCallback();
            });
        });
    });
}

exports.getAvailableLacoPackages = getAvailableLacoPackages;
exports.loadAvailablePackages = loadAvailablePackages;
exports.loadAvailablePackagesJson = loadAvailablePackagesJson;
exports.loadInstalledExts = loadInstalledExts;