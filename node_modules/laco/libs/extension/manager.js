'use strict';

const _ = require('lodash');
const exec = require('child_process').exec;
const glob = require('glob');
const path = require('path');
const async = require('async');
const logger = require('../logger');
const EventEmitter = require('../EventEmitter');

class ExtManager extends EventEmitter {
    constructor(laco, options = {}) {
        super();
        this.laco = laco;
        this.extensions = {};
        this.options = _.merge({
            autoLoad: true,
            autoUpdate: false,
            actions: {
                route: ['read', 'register', 'unregister'],
                midlleware: ['read', 'register', 'unregister'],
                view: ['read', 'register', 'unregister'],
                theme: ['read', 'register', 'unregister']
            }
        }, options);

        if (this.options.autoLoad) {
            this.find();
        }
        this.on('ext.find.done', () => this.laco.emit('ext.manager.initialized'));
    }

    find() {
        setTimeout(async() => {
            try {
                let packages = [];
                let packageRoots = await this.getNodePackageRoot();

                for (var i = 0; i < packageRoots.length; i++) {
                    let dir = packageRoots[i];
                    let dirPackages = await this.scanLacoPacksFromDir(dir);
                    packages = _.union(packages, dirPackages);
                }

                for (var i = 0; i < packages.length; i++) {
                    let packagePath = packages[i];
                    let extBaseName = path.basename(packagePath).replace('laco-ext-', '');
                    this.extensions[extBaseName] = await this.load(packagePath);
                }
                this.emit('ext.find.done');
            } catch (err) {
                logger.error(`\n[ExtManager.find] An error occurred while finding ext:\n`, err);
            }
        }, 0);
    }

    load(packagePath) {
        return new Promise((resolve, reject) => {
            let packageJsonFile = path.join(packagePath, 'package.json');
            let packageJson = {};

            try {
                packageJson = require(packageJsonFile);
            } catch (err) {
                logger.warn(`\n[ExtManager.load] Cannot load package json file for: ${packagePath}\n`, err);
            }

            let extBaseName = path.basename(packagePath).replace('laco-ext-', '');
            let extMainFile = path.join(packagePath, packageJson.main || 'index.js');

            logger.info(`[ExtManager.load] Loading extension: ${extBaseName}`);
            try {
                let ExtItem = require(extMainFile);
                let extObj = null;
                this.laco.once(`ext.${extBaseName}.init`, () => resolve(extObj));
                this.laco.once(`ext.${extBaseName}.error`, err => reject(err));
                extObj = new ExtItem(this.laco);
            } catch (err) {
                logger.error(`\n[ExtManager.load] Cannot load ext file for: ${extMainFile}\n`, err);
                reject(err);
            }
        });
    }

    getNodePackageRoot() {
        if (!process.env.LACO_PACKAGE_ROOTS) {
            process.env.LACO_PACKAGE_ROOTS = [];
        }

        let moduleTypes = {
            global: 'npm root -g',
            local: 'npm root'
        }

        let cmds = _.values(moduleTypes).join(' && ');
        let locations = [];

        return new Promise((resolve, reject) => {
            exec(cmds, (err, stdout, stderr) => {
                if (err || stderr) {
                    logger.error('[ExtManager.moduleLocation] Error finding package location:', { err, stderr });
                    return reject({ err, stderr });
                }
                if (stdout) {
                    locations = _.union(process.env.LACO_PACKAGE_ROOTS, stdout.split('\n')).filter(loc => {
                        if (loc && _.isString(loc)) {
                            return loc;
                        }
                    });
                }
                resolve(locations);
            });
        });
    }

    scanLacoPacksFromDir(dir, callback) {
        return new Promise((resolve, reject) => {
            glob(`${dir}/laco-ext-*`, (err, packs) => {
                if (err) {
                    logger.error(`[ExtManager.scanLacoPacksFromDir] Scan laco package error: ${dir}`);
                    logger.error(err);
                    return reject(err);
                }
                return resolve(packs);
            });
        });
    }
}

module.exports = ExtManager;