"use strict";

const path = require('path');
const async = require('async');
const _ = require('underscore');
const logger = require('./logger');

class Extension {
    constructor(extDir, extName) {
        this.extName = extName || path.basename(extDir);
        this.extDir = extDir;
        this.viewsObj = {};
        this.dependencies = [];
        this.pageFlags = [];
    }
    registerViews(views) {
        if(!_.isArray(views)) {
            logger.error(`[Extension.registerViews]--> ${this.extName}: Invalid views array: `);
            logger.error(views);
            return;
        }
        async.map(views, (view, callback) => {
            if(!_.isString(view)) {
                logger.error(`[Extension.registerViews]--> ${this.extName}: Invalid view item: `);
                logger.error(view);
                return callback(null, null);
            }

            let viewFile = path.join(this.extDir, `views/${view}.marko`);
            let checkViewFile = false;
            try {
                checkViewFile = require(viewFile);
            }
            catch(e) {
                checkViewFile = false;
            }
            
            if(checkViewFile) {
                this.viewsObj[view] = require(viewFile);
                callback(null);
            }
            else {
                logger.error(`[Extension.registerViews]--> ${this.extName}: View '${view}' not found`);
                callback(null, null);
            }
        }, (err, _views) => {
            if(err) {
                logger.error(`[Extension.registerViews]--> ${this.extName}: An error occured when registering extension views: `);
                logger.error(err);
            }
        });
        
    }

    addDependencies(deps) {
        if(!_.isArray(deps)) deps = [deps];
        this.dependencies = _.union(this.dependencies, deps);
    }

    addPageFlags(flags) {
        if(!_.isArray(flags)) flags = [flags];
        this.pageFlags = _.union(this.pageFlags, flags);
    }
    
    view(viewName, data, req, res) {
        data._common = {};
        data._common.dependencies = this.dependencies;
        data._common.pageFlags = this.pageFlags;
        data._common.csrf_field = `<input type="hidden" name="_csrf" value="${req.csrf_token}" />`;
        this.viewsObj[viewName].render(data, res);
    }
}

module.exports = Extension;