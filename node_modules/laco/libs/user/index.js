"use strict";

const g = lacoLib('./libs/global');
const logger = lacoLib('./libs/logger');
const userModel = require('./model');
const userResource = require('./resource');

let init = () => {
    userModel.register();
}

let add = userData => {
    let errors = [];
    if(!userData.username) errors.push('Username cannot be empty');
    if(!userData.email) errors.push('Email cannot be empty');
    if(!userData.password) errors.push('Password cannot be empty');

    userData.password = g.models.user.generateHash(userData.password);
    let _user = new g.models.user(userData);
    return _user.save()
}

let check = (username, password) => {
    return new Promise((resolve, reject) => {
        let hashedPassword =  g.models.user.generateHash(password);
        g.models.user.findOne({ $or: [
            {email: username},
            {username: username}
        ]
        }).exec((err, _user) => {
            if (err) {
                logger.error(`User login error: ${err.message}`);
                return reject('User not found!');
            }

            if (!_user) return reject('User not found!');
            if (!_user.validPassword(password)) return reject('Invalid password');
            return resolve(_user);
        });
    });
}

exports.init = init;
exports.add = add;
exports.check = check;