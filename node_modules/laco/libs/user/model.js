const mongoose = require('mongoose');
const bcrypt   = require('bcrypt-nodejs');
const path = require('path');
const autoIncrement = require('mongoose-auto-increment');
const g = lacoLib('./libs/global');

let register = () => {
    let userSchema = mongoose.Schema({
        username    : String,
        email       : String,
        password    : String,
        firstname       : String,
        lastname        : String,
        fullname        : String,
        phone           : String,
        address         : String,
        avatar          : String,
        nickname        : String,
        signature       : String,
        birthday        : Date,
        gender          : {
            type: String,
            enum: ['male', 'female', 'unknown'],
            default: 'unknown'
        },
        biography       : String,
        provider_name: String,
        provider_user_id: String,
        provider_data: {},
        group: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'user_groups',
            required: false
        },
        level:      {type: Number, enum: [0, 1, 2, 3]},
        status:     {type: String, enum: ['inactive', 'suspended', 'hidden', 'warning', 'active']},
        roles:      {},
        fields: {}
    });

    userSchema.plugin(autoIncrement.plugin, {
        model: 'User',
        field: 'intId',
        startAt: 1,
        incrementBy: 1
    });

    // generating a hash
    userSchema.statics.generateHash = function(password) {
        return bcrypt.hashSync(password, bcrypt.genSaltSync(8), null);
    };
    userSchema.methods.generateHash = function(password) {
        return bcrypt.hashSync(password, bcrypt.genSaltSync(8), null);
    };

    // checking if password is valid
    userSchema.methods.validPassword = function(password) {
        return bcrypt.compareSync(password, this.password);
    };
    g.models.user = mongoose.model('User', userSchema);
};

exports.register = register;
