"use strict";

const form = lacoLib('./libs/form');
const logger = lacoLib('./libs/logger');
const taxonomyType = require('./type');
const provider = require('./provider');

let instant = class TaxonomyInstant {
    constructor(id, type) {
        this.id = id;
        this.type = type;
        this.profile = taxonomyType.get(type);
        this.data = {};
        this.editUrl = `/${process.env.APP_ADMIN_DIR}/taxonomy`;
    }

    form() {
        return new Promise((resolve, reject) => {
            console.log(this.data);
            if(!this.profile) return resolve({});

            let taxonomyItemDataProvider = () => {
                return this.id ? provider.withIds(id) : new Promise((resolve, reject) => {
                    resolve(this.data);
                });
            }

            taxonomyItemDataProvider().then(taxItemData => {
                let f = new form();
                f.addProperties(this.profile.properties);
                f.addFields(this.profile.fields);
                resolve(f.generate(taxItemData));
            }).catch(e => {
                resolve({});
                console.log(e);
            });
        });
    }

    save(data) {
        this.data = data;
        let savedObj = this.id ? provider.update(data, {_id: this.id}) : provider.create(data);

        return new Promise((resolve, reject) => {
            savedObj.then(tax => {
                this.editUrl = `/${process.env.APP_ADMIN_DIR}/taxonomy/add/${tax._id}`;
                this.data = tax;
                return resolve(tax);
            }).catch(e => {
                logger.error(`[Lib.taxonomy.instant.save] Error saving taxonomy item: ${e.message}`);
                logger.error(e);
                return reject(e);
            });
        });
    }
}

module.exports = instant;