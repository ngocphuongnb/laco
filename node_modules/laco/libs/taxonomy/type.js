"use strict";

const _ = require('underscore');
const logger = lacoLib('./libs/logger');

let types = {};

let register = taxTypes => {
    if(!_.isArray(taxTypes)) taxTypes = [taxTypes];
    let defaultType = {
        name: null,
        label: null,
        properties: {},
        fields: {}
    };
    _.each(taxTypes, taxType => {
        taxType = _.extend(_.clone(defaultType), taxType);
        if(!taxType.name) {
            logger.error(`[Taxonomy.type.register] Taxonomy name cannot be empty:`);
            return logger.error(taxType);
        }
        if(types[taxType.name]) return logger.error(`[Taxonomy.type.register] Taxonomy with name: ${taxType.name} existed!`);

        if(!taxType.label) taxType.label = taxType.name.capitalizeFirstChar();
        types[taxType.name] = taxType;
        logger.info(`[Taxonomy.type.register] Success register taxonomy type: ${taxType.name}!`)
    });
}

let remove = taxTypeName => {
    if(types[taxTypeName]) return logger.error(`[Taxonomy.type.remove] Taxonomy with name: ${taxType} does not existed!`);
    delete types[taxTypeName];
    logger.info(`[Taxonomy.type.remove] Success remove taxonomy type: ${taxType}!`)
}

let get = taxTypeName => {
    if(!types[taxTypeName]) {
        logger.error(`[Taxonomy.type.get] Invalid taxonomy type: ${taxTypeName}`);
        return null;
    }
    return types[taxTypeName];
}

exports.register = register;
exports.remove = remove;
exports.get = get;