'use strict';

const colors = require('colors');
const winston = require('winston');
const _ = require('underscore');

const prettifyObj = obj => {
    let cache = [];
    try {
        let rs = JSON.stringify(obj, function (key, value) {
            if (typeof value === 'object' && value !== null) {
                if (cache.indexOf(value) !== -1) {
                    // Circular reference found, discard key
                    return;
                }
                // Store value in our collection
                cache.push(value);
            }
            return value;
        }, 2);
        cache = null;
        return rs;
    } catch (e) {
        console.error(e);
    }
};

const logger = new (winston.Logger)({
    level: 'info',
    transports: [
        new winston.transports.File({
            name: 'warn',
            json: false,
            filename: process.env.LOG_WARN_PATH || (process.env.APP_ROOT + '/private/logs/laco_warn.log'),
            level: 'warn',
            colorize: false,
            timestamp: () => new Date().toISOString(),
            prettyPrint: true,
            formatter: options => {
                let colorRegExp = /[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g;
                let meta = (options.meta && Object.keys(options.meta).length) ? '\n' + prettifyObj(options.meta) : '';
                let finalMessage = `${options.timestamp()} - ${options.level}: ${(options.message ? options.message : '')}${meta}`;
                return finalMessage.replace(/\\"/g, '\'').replace(/\\n/g, '\n').replace(colorRegExp, '');
            }
        }),
        new winston.transports.File({
            name: 'error',
            json: false,
            filename: process.env.LOG_ERROR_PATH || (process.env.APP_ROOT + '/private/logs/laco_error.log'),
            level: 'error',
            colorize: false,
            timestamp: () => new Date().toISOString(),
            prettyPrint: true,
            formatter: options => {
                let colorRegExp = /[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g;
                let meta = (options.meta && Object.keys(options.meta).length) ? '\n' + prettifyObj(options.meta) : '';
                let finalMessage = `${options.timestamp()} - ${options.level}: ${(options.message ? options.message : '')}${meta}`;
                return finalMessage.replace(/\\"/g, '\'').replace(/\\n/g, '\n').replace(colorRegExp, '');
            }
        }),
        new winston.transports.File({
            json: false,
            filename: process.env.LOG_COMBINED_PATH || (process.env.APP_ROOT + '/private/logs/laco.log'),
            level: 'debug',
            colorize: false,
            timestamp: () => new Date().toISOString(),
            prettyPrint: true,
            formatter: options => {
                let colorRegExp = /[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g;
                let meta = (options.meta && Object.keys(options.meta).length) ? '\n' + prettifyObj(options.meta) : '';
                let finalMessage = `${options.timestamp()} - ${options.level}: ${(options.message ? options.message : '')}${meta}`;
                return finalMessage.replace(/\\"/g, '\'').replace(/\\n/g, '\n').replace(colorRegExp, '');
            }
        }),
        new(winston.transports.Console)({
            level: 'debug',
            colorize: true,
            timestamp: () => new Date().toISOString(),
            prettyPrint: true,
            formatter: options => {
                let level = options.level.toLowerCase();
                let message = options.message || '';
                let messageParts = message.split(']');
                let title = messageParts.length > 1 ? messageParts.shift() : '';
                let colorFunction = colors.green;
                if (level == 'error') colorFunction = colors.red;
                if (level == 'warn') colorFunction = colors.yellow;
                let meta = (options.meta && Object.keys(options.meta).length) ? '\n' + prettifyObj(options.meta) : '';
                message = messageParts.join(']').trim();
                title = title ? colorFunction(title.replace('[', '[Laco> ') + '] ') : '';
                return (title + message + meta).replace(/\\"/g, '\'').replace(/\\n/g, '\n');
            }
        })
    ]
});

const transformErrorObj = _obj => {
    if (_obj instanceof Error || _obj instanceof ReferenceError) return `${_obj.stack}\n${_obj.message || ''}`;
    if (!_obj || typeof _obj != 'object') return _obj;
    
    let obj = _.clone(_obj);
    for(var key in obj) {
        let value = obj[key];
        if(typeof value == 'object') {
            if(value && value._bsontype && value._bsontype == 'ObjectID' && value.id) {
                obj[key] = value.toString();
            }
            else if(value instanceof Error) {
                obj[key] = `${value.stack}\n${value.message || ''}`;
            }
            else obj[key] = transformErrorObj(value);
        }
    }
    return obj;
}

module.exports = {
    info: (param1, param2) => logger.info(transformErrorObj(param1), transformErrorObj(param2)),
    warn: (param1, param2) => logger.warn(transformErrorObj(param1), transformErrorObj(param2)),
    warning: (param1, param2) => logger.warn(transformErrorObj(param1), transformErrorObj(param2)),
    error: (param1, param2) => logger.error(transformErrorObj(param1), transformErrorObj(param2)),
    console: console.log
};
