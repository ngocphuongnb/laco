"use strict";

const fs = require('fs');
const path = require('path');
const colors = require('colors');
const logger = lacoLib('./libs/logger');
const user = require('../user');

const isAppLocked = callback => {
    return new Promise((resolve, reject) => {
        logger.info('This app was not installed, so it will be install now!');
        return resolve();
        let installLockFile = path.join(process.env.APP_ROOT, 'install.lock');
        fs.exists(installLockFile, function(exists) { 
            if (exists) {
                logger.error(`This Laco app was installed. If you want to re-install, please run ${colors.red('./laco re-install')}`);
                return reject();
            }
            else {
                logger.info('This app was not installed, so it will be install now!');
                return resolve();
            }
        }); 
    });
}

const addAdministratorUser = () => {
    return new Promise((resolve, reject) => {
        user.add({
            username: 'admin', 
            email: 'admin@laco.com',
            password: '123456',
            roles: {
                all: 1,
                access_admin: 1
            }
        }).then(() => {
            logger.info('Success add administrator account!');
            return resolve();
        }).catch(err => {
            logger.error(`Cannot add administrator account:`);
            return reject(err.message);
        });
        
    });
}

const writeAppLockFile = () => {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            let installLockFile = path.join(process.env.APP_ROOT, 'install.lock');
            fs.writeFile(installLockFile, 'Laco app installed', err => {
                if(!err) {
                    logger.info(`Success creating ${colors.green('install.lock')} file!`);
                    return resolve();
                }
                logger.error(`Error creating ${colors.green('install.lock')} file, please create it manually!`);
                logger.error(err);
                return reject();
            });
        }, 1000);
    });
}

exports.isAppLocked = isAppLocked;
exports.addAdministratorUser = addAdministratorUser;
exports.writeAppLockFile = writeAppLockFile;