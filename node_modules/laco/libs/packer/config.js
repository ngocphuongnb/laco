"use strict";

const fs = require('fs');
const path = require('path');
const colors = require('colors');
const prompt = require('prompt');
const logger = lacoLib('./libs/logger');
const configRules = require('./config_rules');

module.exports = callback => {
    let appConfigurationFile = path.join(process.env.APP_ROOT, '.env');
    logger.info('[Packer.config] Configuring Laco app...');
    logger.info(`Configure file location: ${appConfigurationFile}\n`);
    prompt.message = colors.cyan("Laco Configuration");
    prompt.delimiter = colors.green(":");
    prompt.start();
    prompt.get(configRules.rules, function (err, result) {
        logger.console('\n     =====================================================================');
        logger.console('                          Confirm your configuration?                       ');
        logger.console('     =====================================================================');
        for(let configKey in result) {
            logger.console(`          ${configKey}: ${colors.green(result[configKey])}`);
        }

        logger.console('     =====================================================================\n');
        prompt.get({
            properties: {
                confirm: {
                    description: 'Are you sure to use this configurarion? [y/n]',
                    type: 'string',
                    pattern: /^(y|n|yes|no)$/i,
                    required: true,
                    default: 'y'
                }
            }
        }, function (err, final) {
            if(!final) return callback(null);
            if(/^(n|no)$/i.test(final.confirm)) return logger.console('Configuration terminated');
            if(/^(y|yes)$/i.test(final.confirm)) {
                let configurationContent = '';
                for(let configKey in result)
                    configurationContent += ` ${configKey}=${result[configKey]}\n`;

                fs.writeFile(appConfigurationFile, configurationContent, err => {
                    if(err) logger.error(`[Laco.configure] Cannot write Laco app config file: ${err.message}`);
                    else logger.console(colors.green(`[Laco.configure] Success write Laco app config!`));
                    return callback(err);
                });
            }
        });
    });
}