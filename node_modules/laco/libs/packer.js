"use strict";

const path = require('path');
const ProgressBar = require('progress');
const prompt = require('prompt');
const colors = require("colors/safe");
const logger = lacoLib('./libs/logger');

const config = () => {
    let stdin = process.openStdin();
    logger.console("\n");
    logger.info('[Packer.config] Configuring Laco app...');
    logger.info(`Configure file location: ${path.join(process.env.APP_ROOT, '.env')}`);
    logger.console("\n");
    
    var schema = {
        properties: {
            app_port: {
                description: 'Please enter app port',
                type: 'integer',
                pattern: /^[0-9]+$/,
                message: 'App port must be an integer',
                default: 2811,
                required: true
            },
            admin_dir: {
                description: 'Please enter admin route dir',
                type: 'string',
                pattern: /^[a-zA-Z0-9\-\_]+$/,
                message: 'Admin dir must be only letters, number, or dashes',
                default: 'admin',
                required: true
            }
        }
    };
    prompt.message = colors.cyan("Laco Configuration");
    prompt.delimiter = colors.green(":");
    prompt.start();
    prompt.get(schema, function (err, result) {
        logger.console('Confirm your configuration:');
        logger.console(result);
        prompt.get({
            properties: {
                confirm: {
                    description: 'Are you sure to use this configurarion? [y/n]',
                    type: 'string',
                    pattern: /^y|n+$/,
                    required: true,
                    default: 'y'
                }
            }
        }, function (err, result) {
            logger.console(result);
        });
    });
}

const install = () => {
    logger.info('[Packer.install] Installing Laco app...');
    
}

const update = () => {
    logger.info('[Packer.update] Updating Laco app...');
    let bar = new ProgressBar('Update Laco app: :percent :bar', {
        complete: '=',
        incomplete: '.',
        width: 50,
        total: 100
    });
    let timer = setInterval(function () {
        bar.tick(1);
        if (bar.complete) {
            console.log('Completed');
            clearInterval(timer);
        }
    }, 100);
}

exports.config = config;
exports.install = install;
exports.update = update;