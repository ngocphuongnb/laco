'use strict';

const _ = require('lodash');
const program = require('commander');
const logger = require('../logger');
const helper = require('../helper');
const EventEmitter = require('../EventEmitter');

class Commander extends EventEmitter {
    constructor(laco) {
        super();
        this.laco = laco;
        this.registeredCommands = {};
        this.program = program;
        // this.program.version(this.laco.version);
        // this.program.option('-s, --start', 'Start current Laco app');
        // this.program.option('-r, --run [value]', 'Run app command');

        this.laco.once('ready', () => {
            this.map();
            // this.program.parse(process.argv);
            // this.executeCommand();
        });

        this.commandDefault = {
            name: null,
            alias: null,
            description: null,
            options: []
        }

        this.commandOptionDefault = {
            name: null,
            alias: null,
            description: null,
            type: null
        }
    }

    map() {
        for (var commandName in this.registeredCommands) {
            let command = this.registeredCommands[commandName];

            let userCommand = process.argv[2];

            if (commandName == userCommand) {
                process.argv.splice(2, 1);
                this.program.version(command.version || this.laco.version);
                this.program.description(command.description);


                if (_.isArray(command.options)) {
                    for (var i = 0; i < command.options.length; i++) {
                        let commandOption = _.merge(this.commandOptionDefault, command.options[i]);
                        this.program.option(`${commandOption.alias}, ${commandOption.name} [value]`, commandOption.description);
                    }
                }

            }

            this.program.parse(process.argv);
            console.log(this.program);
        }
    }

    isCommand(cmd) {
        return this.program[cmd] || (this.program.run && this.program.run[cmd]) || false;
    }

    getRunCommand() {
        return this.program.run || null;
    }

    executeCommand() {
        let runCommand = this.getRunCommand();
        if (!this.registeredCommands[runCommand]) {
            return logger.error(`[Commander.exec:] Invalid command: ${runCommand}`);
        }

        let cmd = this.registeredCommands[runCommand];
        cmd.handler.exec();
    }

    register(cmds) {
        if (!_.isArray(cmds)) {
            cmds = [cmds];
        }

        let caller = helper.caller();

        for (var i = 0; i < cmds.length; i++) {
            let cmd = _.merge(this.commandDefault, cmds[i]);
            if (!cmd.name) {
                logger.error('[Commander.regis] Invalid command: ', { cmd, caller });
            } else {
                logger.info(`[Commander.regis] Registering command: ${cmd.name}`);
                cmd.caller = caller;
                this.registeredCommands[cmd.name] = cmd;
            }
        }
    }
}

module.exports = Commander;