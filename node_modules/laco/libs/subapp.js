'use strict';

const express = require('express');
const _ = require('lodash');
const Router = require('./router');
const logger = require('./logger');

class SubAppBase {
    constructor() {
        this.express = express();
        this.router = new Router(this.express);
    }

    dispatch() {
        this.router.dispatch();
    }
}

class SubApp {
    constructor(app) {
        this.app = app;
        this.registeredApps = {};
    }

    register(base = null, app) {
        if (!base || !_.isString(base)) {
            return logger.error(`[subapp.register] Invalid app base(tring): (empty)`);
        }
        let cleanedBase = base.trimChar('/');
        if (this.registeredApps[cleanedBase]) {
            return logger.error(`[subapp.register] App base existed: ${base}`);
        }
        logger.info(`[subapp.register] Success register sub app: ${base}`);
        this.registeredApps[cleanedBase] = {
            enabled: true,
            base: base,
            app: app
        };
    }

    delete(base) {
        logger.info(`[subapp.register] Deleting sub app: ${base}`);
        let cleanedBase = base.trimChar('/');
        if (!this.registeredApps[cleanedBase]) {
            return logger.error(`[subapp.register] App base not found: ${base}`);
        }
        delete this.registeredApps[cleanedBase];
    }

    all() {
        return this.registeredApps;
    }

    dispatch() {
        _.each(this.registeredApps, sub => {
            sub.app.dispatch();
            sub.app.express.on('mount', parent => {
                logger.info(`[subapp.dispatch] [${sub.base}] mounted...`);
            });
            this.app.use(sub.base, sub.app.express);
        });
    }
}

exports.Base = SubAppBase;
exports.SubApp = SubApp;