"use strict";

const _ = require("underscore");
let fieldTypes = {};

//let availableFieldTypes = ['group', 'file', 'html', 'image', 'select', 'number', 'switch', 'textarea', 'raw', 'reference'];
let availableFieldTypes = ['input', 'image', 'checkbox', 'datetime', 'editor'];

_.each(availableFieldTypes, field => {
    fieldTypes[field] = require(`./fields/${field}`);
});

class Form {
    constructor(properties) {
        return this.prepare(properties);
    }

    formElement(name, data) {
        if(!data) data = {};
        data = _.extend({
            name: name,
            label: lang('Label'),
            type: 'String',
            display: 'image',
            visible: false,
            position: 'topBox',
            value: '',
            default: null,
            required: false,
            cols: 12
        }, data);

        if(!fieldTypes[data.display]) data.display = 'input';
        return fieldTypes[data.display].renderToString(data);
    };

    formGroupElements(groupName, groupObj, postData, parentFieldName) {
        if(!parentFieldName) parentFieldName = null;
        let groupArr = [];
        if(_.isObject(groupObj.fields)) {
            _.mapObject(groupObj.fields, (fieldObj, fieldName) => {
                if(!fieldObj.default) fieldObj.default = '';
                let _parentFieldName = parentFieldName;

                // Override field parent name instead of group field name
                if(_.isString(fieldObj.parent_name))
                    _parentFieldName = fieldObj.parent_name;
                let _postData = postData;
                let _fieldName = fieldName;
                if(_.isString(_parentFieldName)) {
                    if(_parentFieldName == '') _fieldName = fieldName;
                    else {
                        _fieldName = _parentFieldName + '[' + fieldName + ']';
                        if(!postData[_parentFieldName]) _postData = postData[_parentFieldName];
                    }
                }
                fieldObj.value = '';
                if(!_postData) fieldObj.value = fieldObj.default;
                if(_.isObject(_postData) && _postData[fieldName]) fieldObj.value = _postData[fieldName];

                if(fieldObj.type == 'fieldsArray' && fieldObj.display == 'group')
                    groupArr.push(this.formGroupElements(_fieldName, fieldObj, postData, _parentFieldName));
                else
                    groupArr.push(this.formElement(_fieldName, fieldObj));
            });
        }
        groupObj.groupContent = groupArr.join("\n");
        return fieldTypes.group(groupName, groupObj);
    };

    prepare(properties) {
        if(!properties || !_.isObject(properties)) properties = {};
        let self = {
            properties: properties,
            fields: {}
        };
        self.addProperties = properties => {
            if(!_.isObject(properties)) properties = {};
            self.properties = _.extend(self.properties, properties);
        };
        self.addFields = fields => {
            if(!_.isObject(fields)) fields = {};
            self.fields = _.extend(self.fields, fields);
        };
        self.generate = postData => {
            if(!postData) postData = {};
            let formObj = {};
            let formHtml = {};
            let _properties = _.clone(self.properties);

            _.mapObject(_properties, (fieldObj, fieldName) => {
                if(!fieldObj.default) fieldObj.default = '';
                if(!fieldObj.position) fieldObj.position = 'beforeContent';
                if(!_.isArray(formObj[fieldObj.position])) formObj[fieldObj.position] = [];

                if(!postData) fieldObj.value = fieldObj.default;

                if(postData[fieldName]) fieldObj.value = postData[fieldName];
                else fieldObj.value = fieldObj.default;

                if(fieldObj.type == 'fieldsArray' && fieldObj.display == 'group')
                    formObj[fieldObj.position].push(this.formGroupElements(fieldName, fieldObj, postData));
                else
                    formObj[fieldObj.position].push(this.formElement(fieldName, fieldObj));
            });
            _.mapObject(self.fields, (fieldObj, fieldName) => {
                fieldObj.value = '';
                if(!fieldObj.default) fieldObj.default = '';
                if(!fieldObj.position) fieldObj.position = 'beforeContent';
                if(!_.isArray(formObj[fieldObj.position])) formObj[fieldObj.position] = [];
                let _fieldName = 'fields[' + fieldName + ']';

                if(!postData) fieldObj.value = fieldObj.default;
                if(_.isObject(postData) && _.isObject(postData.fields) && postData.fields[fieldName])
                    fieldObj.value = postData.fields[fieldName];

                if(fieldObj.type == 'fieldsArray' && fieldObj.display == 'group') {
                    let parentFielName = fieldObj.parent_name || 'fields';
                    formObj[fieldObj.position].push(this.formGroupElements(_fieldName, fieldObj, postData, parentFielName));
                }
                else
                    formObj[fieldObj.position].push(this.formElement(_fieldName, fieldObj));
            });
            _.mapObject(formObj, (fieldArray, areaName) => {
                formHtml[areaName] = formObj[areaName].join("\n");
            });
            formHtml.__formData = postData;
            return formHtml;
        };
        return self;
    };
}

module.exports = Form;