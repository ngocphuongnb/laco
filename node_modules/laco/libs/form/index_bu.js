"use strict";

const _ = require("underscore");
let fieldTypes = {};
fieldTypes.image = require('./fields/image');
fieldTypes.file = require('./fields/file');
fieldTypes.checkbox = require('./fields/checkbox');
fieldTypes.input = require('./fields/input');
fieldTypes.number = require('./fields/number');
fieldTypes.string_list = require('./fields/string_list');
fieldTypes.textarea = require('./fields/textarea');
fieldTypes.multi_select = require('./fields/multi_select');
fieldTypes.referer_single_select = require('./fields/referer_single_select');
fieldTypes.referer_multi_select = require('./fields/referer_multi_select');
fieldTypes.single_select = require('./fields/single_select');
fieldTypes.html = require('./fields/html');
fieldTypes.tags = require('./fields/tags');
fieldTypes.date_time = require('./fields/date_time');
fieldTypes.switch = require('./fields/switch');
fieldTypes.fields_group = require('./fields/fields_group');
fieldTypes.posts_picker = require('./fields/posts_picker');
fieldTypes.raw = require('./fields/raw');
fieldTypes.array_list = require('./fields/array_list');

const formElement = (name, data, value) => {
    if(!data) data = {};
    if(!value) value = '';
    let data = _.extend({
        label: lang('Label'),
        type: 'String',
        display: 'image',
        visible: false,
        position: 'topBox',
        value: '',
        default: null,
        required: false,
        cols: 12
    }, data);

    if(!fieldTypes[data.display]) data.display = 'input';
    return fieldTypes[data.display](name, data);
};

let formGroupElements = (groupName, groupObj, postData, parentFieldName) => {
    if(!parentFieldName) parentFieldName = null;
    let groupArr = [];
    if(_.isObject(groupObj.fields)) {
        _.mapObject(groupObj.fields, (fieldObj, fieldName) => {
			if(!fieldObj.default_value) fieldObj.default_value = '';
            let _parentFieldName = parentFieldName;

            // Override field parent name instead of group field name
            if(_.isString(fieldObj.parentFieldName))
                _parentFieldName = fieldObj.parentFieldName;
            let _postData = postData;
            let _fieldName = fieldName;
            if(_.isString(_parentFieldName)) {
                if(_parentFieldName == '') _fieldName = fieldName;
                else {
                    _fieldName = _parentFieldName + '[' + fieldName + ']';
                    if(!postData[_parentFieldName]) _postData = postData[_parentFieldName];
                }
            }
            if(!_.isObject(_postData) || !_postData[fieldName])
                fieldObj.value = fieldObj.default_value;
            else if(_.isObject(_postData) && !_postData[fieldName])
                fieldObj.value = _postData[fieldName];
            else if(!fieldObj.value)
                fieldObj.value = fieldObj.default_value;

            if(fieldObj.type == 'fieldsArray' && fieldObj.display == 'fields_group')
                groupArr.push(formGroupElements(_fieldName, fieldObj, postData, _parentFieldName));
            else
                groupArr.push(formElement(_fieldName, fieldObj));
        });
    }
    groupObj.groupContent = groupArr.join("\n");
    return fieldTypes.fields_group(groupName, groupObj);
};

let init = properties => {
    if(!properties || !_.isObject(properties)) properties = {};
    let self = {
        properties: properties,
        fields: {}
    };
    self.addProperties = properties => {
        if(!properties || !_.isObject(properties))
            properties = {};
        self.properties = _.extend(self.properties, properties);
    };
    self.addFields = fields => {
        if(!fields || !_.isObject(fields)) fields = {};
        self.fields = _.extend(self.fields, fields);
    };
    self.generate = postData => {
        if(!postData) postData = {};
        let formObj = {};
        let formHtml = {};
        let _properties = _.clone(self.properties);
        _.mapObject(_properties, (fieldObj, fieldName) => {
			if(!fieldObj.default_value) fieldObj.default_value = '';
            if(!fieldObj.position)
                fieldObj.position = 'beforeContent';
            if(!formObj[fieldObj.position])
                formObj[fieldObj.position] = [];
            //if(!fieldObj.value && !postData[fieldName])
            if(!postData[fieldName])
                fieldObj.value = fieldObj.default_value;
            else if(!postData[fieldName] != 'undefined')
                fieldObj.value = postData[fieldName];
            else if(!fieldObj.value)
                fieldObj.value = fieldObj.default_value;
            if(fieldObj.type == 'fieldsArray' && fieldObj.display == 'fields_group')
                formObj[fieldObj.position].push(formGroupElements(fieldName, fieldObj, postData));
            else
                formObj[fieldObj.position].push(formElement(fieldName, fieldObj));
        });
        _.mapObject(self.fields, (fieldObj, fieldName) => {
			if(!fieldObj.default_value) fieldObj.default_value = '';
            if(!fieldObj.position)
                fieldObj.position = 'beforeContent';
            if(!formObj[fieldObj.position])
                formObj[fieldObj.position] = [];
            let _fieldName = 'fields[' + fieldName + ']';
            //if(fieldObj.value && (!_.isObject(postData) || !_.isObject(postData.fields) || !postData.fields[fieldName]))
            if(!_.isObject(postData) || !_.isObject(postData.fields) || !postData.fields[fieldName])
                fieldObj.value = fieldObj.default_value;
            else if(_.isObject(postData) && _.isObject(postData.fields) && !postData.fields[fieldName] != 'undefined')
                fieldObj.value = postData.fields[fieldName];
            else if(!fieldObj.value)
                fieldObj.value = fieldObj.default_value;

            if(fieldObj.type == 'fieldsArray' && fieldObj.display == 'fields_group')
                formObj[fieldObj.position].push(formGroupElements(_fieldName, fieldObj, postData, 'fields'));
            else
                formObj[fieldObj.position].push(formElement(_fieldName, fieldObj));
        });
        _.mapObject(formObj, (fieldArray, areaName) => {
            formHtml[areaName] = formObj[areaName].join("\n");
        });
        formHtml.__formData = postData;
        return formHtml;
    };
    return self;
};

exports.init = init;