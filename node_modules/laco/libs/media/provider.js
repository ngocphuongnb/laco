"use strict";
const mediaModel = require('./model');
const _ = require('underscore');
const async = require('async');
const g = lacoLib('./libs/global');
const logger = lacoLib('./libs/logger');
const Provider = lacoLib('./libs/provider');
const MediaObject = require('./object');

class MediaProvider extends Provider {
    constructor() {
        super();

        this.defaultFilterObj = _.extend(this.defaultFilterObj, {
            limit: 12,
            term: '',
            types: ['all']
        });
        this.conditionalBuilder = filter => {
            let fileTypes = {
                document: ['doc', 'docx', 'ppt', 'pptx', 'xls', 'xlsx', 'pdf', 'txt', 'rtf', 'chm'],
                image: ['jpg', 'jpeg', 'png', 'gif', 'bmp'],
                video: ['mp4', 'mpg', 'mpeg', 'kmv', 'flv', 'webm'],
                audio: ['mp3', 'wav', 'm4a', 'flac'],
                archive: ['zip', 'rar', 'tgz', 'tar', 'gz'],
                application: ['exe', 'dll', 'dmg']
            };
            let conditions = [];
            if(filter.term && _.isString(filter.term)) {
                conditions.push({source: new RegExp(filter.term, 'gi')});
                conditions.push({alt: new RegExp(filter.term, 'gi')});
                conditions.push({name: new RegExp(filter.term, 'gi')});
                conditions.push({description: new RegExp(filter.term, 'gi')});
            }

            if(filter.types && filter.types.indexOf('all') == -1) {
                let searchFileExts = [];
                _.each(filter.types, type => {
                    if(fileTypes[type] && _.isArray(fileTypes[type]))
                        searchFileExts = _.union(searchFileExts, fileTypes[type]);
                });
                conditions.push({
                    source: {$regex: new RegExp('(.*)\.(' + searchFileExts.join('|') + ')$', 'i')}
                });
            }

            return conditions;
        }

        this.itemTransfomer = item => new MediaObject(item);
    }
}

module.exports = MediaProvider;