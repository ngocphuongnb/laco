"use strict";

const path = require('path');
const _ = require('underscore');
const logger = lacoLib('./libs/logger');

const fs = require('fs');
const gm = require('gm');
const mkdirp = require('mkdirp');

const imagemin= require('imagemin');
const imageminOptipng = require('imagemin-optipng');
const imageminGifsicle = require('imagemin-gifsicle');
const imageminJpegtran = require('imagemin-jpegtran');
const imageminPngquant = require('imagemin-pngquant');
const imageminSvgo = require('imagemin-svgo');

const isMediaExist = mediaFile => {
    return new Promise(
        (resolve, reject) => fs.stat(
            mediaFile,
            (err, stats) => (!err || err.code === 'ENOENT') ? resolve(null) : reject(err)
        )
    );
}

const compressImage = imageFiles => {
    if(!_.isArray(imageFiles)) imageFiles = [imageFiles];
    imagemin(imageFiles, path.dirname(imageFiles[0]), {
        plugins: [
            imageminOptipng(),
            imageminGifsicle(),
            imageminJpegtran(),
            imageminPngquant(),
            imageminSvgo()
        ]
    })
    .then(files => logger.info('Image compression completed'))
    .catch(err => {
        logger.error(`[Lib.media.omtimizer.compressImage] Error while compressing image file: `);
        logger.error(imageFile);
        logger.error(err);
    });
}

let thumbGenerator = filename => {
    return new Promise((resolve, reject) => {
        let pathObj = path.parse(filename);

        let thumbName = pathObj.base;

        let nameObj = pathObj.name.split('-');
        let thumbSize = nameObj.pop();

        let mediaName = nameObj.join('-') + pathObj.ext;

        let thumbObj = thumbSize.split('.');
        let thumbSizes = thumbObj[0].split('x');
        let thumbMode = thumbObj[1] || 'cc';

        if(thumbSizes.length != 2) return reject('Invalid thumbnail size');

        let new_width = parseInt(thumbSizes[0]);
        let new_height = parseInt(thumbSizes[1]);
        
        let cropGravity = 'Center';
        if(thumbMode == 'ctl') cropGravity = 'NorthWest';
        if(thumbMode == 'ct') cropGravity = 'North';
        if(thumbMode == 'ctr') cropGravity = 'NorthEast';
        if(thumbMode == 'cl') cropGravity = 'West';
        if(thumbMode == 'cr') cropGravity = 'East';
        if(thumbMode == 'cbl') cropGravity = 'SouthWest';
        if(thumbMode == 'cb') cropGravity = 'South';
        if(thumbMode == 'cbr') cropGravity = 'SouthEast';

        let mediaPath = path.join(process.env.APP_ROOT, 'public/data/uploads', pathObj.dir, mediaName);

    
        isMediaExist(mediaPath).then(() => {
            let thumbDir = path.join(process.env.APP_ROOT, 'public/data/thumbs', pathObj.dir);
            let thumbPath = path.join(thumbDir, thumbName);
            let readStream = fs.createReadStream(mediaPath);
            let imgGm = gm(readStream, thumbName).resize(new_width, new_height, '^').gravity(cropGravity).crop(new_width, new_height);

            mkdirp(thumbDir, err => {
                if (!err) {
                    imgGm.write(thumbPath, err => {
                        if(!err) {
                            resolve(fs.createReadStream(thumbPath));
                            imagemin([thumbPath], path.dirname(thumbPath), {
                                plugins: [
                                    imageminOptipng(),
                                    imageminGifsicle(),
                                    imageminJpegtran(),
                                    imageminPngquant(),
                                    imageminSvgo()
                                ]
                            }).then(files => logger.info('File compression completed'))
                            .catch(err => {
                                logger.error(`[Media.thumbGenerator] Cannot compress thumb image: ${thumbPath}`)
                                logger.error(err);
                                return reject(err, '/data/uploads/' + pathObj.dir + '/' + mediaName);
                            });
                        }
                        else {
                            logger.error(`[Media.thumbGenerator] Cannot write thumb image: ${thumbPath}`)
                            logger.error(err);
                            return reject(err, '/data/uploads/' + pathObj.dir + '/' + mediaName);
                        }
                    });
                }
                else {
                    logger.error(`[Media.thumbGenerator] Cannot write thumb dir: ${thumbPath}`)
                    logger.error(err);
                    return reject(err, '/data/uploads/' + pathObj.dir + '/' + mediaName);
                }
            });
        }).catch(err => {
            logger.error(`[Media.thumbGenerator] Media file not found: ${mediaPath}`)
            logger.error(err);
            return reject(err, '/data/uploads/' + pathObj.dir + '/' + mediaName);
        });
    });
}

exports.isMediaExist = isMediaExist;
exports.compressImage = compressImage;
exports.thumbGenerator = thumbGenerator;