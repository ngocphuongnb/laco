"use strict";

const fs = require('fs');
const gm = require('gm');
const path = require('path');
const mkdirp = require('mkdirp');
const g = lacoLib('./libs/global');
const logger = lacoLib('./libs/logger');
const mediaModel = require('./model');
const mediaProvider = require('./provider');
const mediaOptimizer = require('./optimizer');
let provider = null;

let init = () => {
    mediaModel.register();
    provider = new mediaProvider();

    exports.provider = provider;
}

let isMediaExist = mediaFile => {
    return new Promise(
        (resolve, reject) => fs.stat(
            mediaFile,
            (err, stats) => (!err || err.code === 'ENOENT') ? resolve(null) : reject(err)
        )
    );
}

let thumbGenerator = filename => {
    return new Promise((resolve, reject) => {
        let pathObj = path.parse(filename);

        let thumbName = pathObj.base;

        let nameObj = pathObj.name.split('-');
        let thumbSize = nameObj.pop();

        let mediaName = nameObj.join('-') + pathObj.ext;

        let thumbObj = thumbSize.split('.');
        let thumbSizes = thumbObj[0].split('x');
        let thumbMode = thumbObj[1] || 'cc';

        if(thumbSizes.length != 2) return reject('Invalid thumbnail size');

        let new_width = parseInt(thumbSizes[1]);
        let new_height = parseInt(thumbSizes[2]);
        
        let cropGravity = 'Center';
        if(thumbMode == 'ctl') cropGravity = 'NorthWest';
        if(thumbMode == 'ct') cropGravity = 'North';
        if(thumbMode == 'ctr') cropGravity = 'NorthEast';
        if(thumbMode == 'cl') cropGravity = 'West';
        if(thumbMode == 'cr') cropGravity = 'East';
        if(thumbMode == 'cbl') cropGravity = 'SouthWest';
        if(thumbMode == 'cb') cropGravity = 'South';
        if(thumbMode == 'cbr') cropGravity = 'SouthEast';

        let mediaPath = path.join(process.env.APP_ROOT, 'data/uploads', pathObj.dir, mediaName);

    
        isMediaExist(mediaPath).then(() => {
            let thumbDir = path.join(process.env.APP_ROOT, 'data/thumbs', pathObj.dir);
            let thumbPath = path.join(thumbDir, thumbName);
            let readStream = fs.createReadStream(mediaPath);
            let imgGm = gm(readStream, thumbName).resize(new_width, new_height, '^').gravity(cropGravity).crop(new_width, new_height);

            mkdirp(thumbDir, err => {
                if (!err) {
                    imgGm.write(thumbPath, err => {
                        if(!err) {
                            resolve(fs.createReadStream(thumbPath).pipe(res));
                            imagemin([thumbPath], path.dirname(thumbPath), {
                                plugins: [
                                    imageminOptipng(),
                                    imageminGifsicle(),
                                    imageminJpegtran(),
                                    imageminPngquant(),
                                    imageminSvgo()
                                ]
                            }).then(files => logger.info('File compression completed'))
                            .catch(err => {
                                logger.error(`[Media.thumbGenerator] Cannot compress thumb image: ${thumbPath}`)
                                logger.error(err);
                                return reject(err, '/data/uploads/' + pathObj.dir + '/' + mediaName);
                            });
                        }
                        else {
                            logger.error(`[Media.thumbGenerator] Cannot write thumb image: ${thumbPath}`)
                            logger.error(err);
                            return reject(err, '/data/uploads/' + pathObj.dir + '/' + mediaName);
                        }
                    });
                }
                else {
                    logger.error(`[Media.thumbGenerator] Cannot write thumb dir: ${thumbPath}`)
                    logger.error(err);
                    return reject(err, '/data/uploads/' + pathObj.dir + '/' + mediaName);
                }
            });
        }).catch(err => {
            logger.error(`[Media.thumbGenerator] Media file not found: ${mediaPath}`)
            logger.error(err);
            return reject(err, '/data/uploads/' + pathObj.dir + '/' + mediaName);
        });
    });
}

exports.init = init;
exports.optimizer = mediaOptimizer;
exports.thumbGenerator = thumbGenerator;