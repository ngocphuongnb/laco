"use strict";

const path = require('path');
let LCO = lacoLib('./libs/lco');

let imageMimeTypes = ['image/bmp', 'image/x-windows-bmp', 'image/gif', 'image/x-icon', 'image/jpeg', 'image/pjpeg', 'image/png'];

class MediaObject extends LCO {
    constructor(props) {
        super(props);
        this.mimetypePrefix = this.mimetype.split('/')[0];
        let mediaExts = this.source.split('.');
        this.ext = mediaExts.length > 1 ? mediaExts.pop() : '...';
        this.imageIdt = this.isImage ? 'laco-image' : 'not-image';
    }

    get link() {
        return this.source;
    }

    get isImage() {
        return imageMimeTypes.includes(this.mimetype.toLowerCase());
    }

    thumb(size, mode) {
        if(this.isImage) {
             if(!mode) mode = 'cc';
            let sourceObj = path.parse(this.source);
            let sourceDir = sourceObj.dir.split('/data/uploads');
            sourceDir.shift();
            sourceDir = '/data/thumbs' + sourceDir.join('/data/uploads') + '/';
            return sourceDir + sourceObj.name + '-' + size + '.' + mode + sourceObj.ext;
        }
        else return '';
    }

    thumbElm(size, mode) {
        return this.isImage
            ? `<div class="thumb"><img src="${this.thumb(size, mode)}" /></div>`
            : `<div class="thumb not-image thumb-file-${this.ext}"><span>${this.ext}</span></div>`;
    }
}

module.exports = MediaObject;