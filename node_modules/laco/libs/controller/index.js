'use strict';

const _ = require('lodash');
const logger = require('../logger');

class ControllerManager {
    constructor(subapp) {
        this.subapp = subapp;
        this.namespace = this.subapp.name;
        this.registeredControllers = {};
        this.controllerBase = {
            name: null,
            label: null,
            handler: null
        }
    }

    get(name) {
        return this.registeredControllers[name] || null;
    }

    register(controllers) {
        if (!_.isArray(controllers)) {
            controllers = [controllers];
        }

        for (var i = 0; i < controllers.length; i++) {
            let controller = controllers[i];
            controller = _.merge(_.clone(this.controllerBase), controller);
            if (!controller.name || !_.isFunction(controller.handler)) {
                logger.error(`[Ctller.register] [${this.namespace}] Invalid controller`, controller);
            } else if (this.registeredControllers[controller.name]) {
                logger.error(`[Ctller.register] [${this.namespace}] ${controller.name} existed!`, controller);
            } else {
                if (!controller.label) {
                    controller.label = controller.name;
                }
                logger.info(`[Ctller.register] [${this.namespace}] Registering controller: ${controller.name}`);
                this.registeredControllers[controller.name] = new controller.handler(this, controller);
            }
        }
    }
}

module.exports = ControllerManager;