'use strict';

const _ = require('underscore');
const path = require('path');
const mkdirp = require('mkdirp');
const rimraf = require('rimraf');
const async = require('async');
const lasso = require('lasso');
const exec = require('child_process').exec;

const callRm = (dir, callback) => {
    exec(`rm -rf ${dir}`, (err, stdout, stderr) => callback(err || stderr, stdout));
}

const before = (task, callback) => {
    let uiName = task.target;
    let uiOutputPath = path.join(APP_ROOT, 'public/assets', uiName);
    mkdirp(uiOutputPath, callback);
}

const after = (task, callback) => {
    callback(null);
}

const mkdir = (task, callback) => {
    let uiOutputPath = path.join(APP_ROOT, 'public/assets', task.uiName);
    let targetDirs = !_.isArray(task.target) ? [task.target] : task.target;
    targetDirs = _.map(targetDirs, dir => path.join(uiOutputPath, dir.replace(/\.\.\//g, '/').replace(/\*+/g, '*')));
    async.each(targetDirs, mkdirp, callback);
}

const rm = (task, callback) => {
    let uiOutputPath = path.join(APP_ROOT, 'public/assets', task.uiName);
    let targetDirs = !_.isArray(task.target) ? [task.target] : task.target;
    targetDirs = _.map(targetDirs, dir => path.join(uiOutputPath, dir.replace(/\.\.\//g, '/').replace(/\*+/g, '*')));
    async.each(targetDirs, rimraf, callback);
}

const build = (task, callback) => {
    let uiOutputPath = path.join(APP_ROOT, 'public/assets', task.uiName);
    let targetFile = path.join(uiOutputPath, task.target);
    let dependencies = task.dependencies;
    if (!_.isArray(dependencies)) {
        dependencies = [dependencies];
    }

    lasso.configure({
        // plugins: ['lasso-less'],
        outputDir: uiOutputPath,
        urlPrefix: 'http://mycdn/static',
        fingerprintsEnabled: true,
        includeSlotNames: false,
        minify: false,
        minifyJS: false,
        minifyCSS: false,
        minifyInlineOnly: false,
        minifyInlineJSOnly: false,
        minifyInlineCSSOnly: false,
        resolveCssUrls: true,
        relativeUrlsEnabled: true,
        bundlingEnabled: true,
        // bundles: [{
        //     name: task.name,
        //     dependencies: dependencies
        // }],
        noConflict: task.uiName
    });
    lasso.lassoPage({
            name: task.uiName,
            dependencies: dependencies
        },
        (err, lassoPageResult) => {
            console.log([
                lassoPageResult,
                lassoPageResult.getHeadHtml(),
                lassoPageResult.getBodyHtml()
            ]);
            return callback(err);
        });
}


exports.before = before;
exports.after = after;
exports.mkdir = mkdir;
exports.build = build;
exports.rm = rm;