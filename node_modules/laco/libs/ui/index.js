'use strict';

const _ = require('lodash');
const logger = require('../logger');

const UITask = require('./task');
const UIBase = require('./base');
const UILayout = require('./layout');
const UIView = require('./view');
const CMD = require('./command');

class UIManager {
    constructor(laco) {
        this.laco = laco;
        this.registerdUIs = {};

        this.BasedUI = {
            name: null,
            label: null,
            default: false,
            handler: null,
        }

        this.defaultUI = null;

        this.laco.CMD.register({
            name: 'uitask',
            description: 'UITask commands',
            options: [{
                    name: 'list',
                    description: 'List all available tasks',
                    require: false,
                },
                {
                    name: 'run',
                    description: 'Run an UI tasks',
                    require: true,
                }
            ],
            handler: new CMD(this)
        });
    }

    register(uis) {
        if (!_.isArray(uis)) {
            uis = [uis];
        }

        for (var i = 0; i < uis.length; i++) {
            let ui = _.merge(_.clone(this.BasedUI), uis[i]);

            if (!ui.name) {
                logger.error(`[UIMana.register] Invalid UI: `, ui);
            } else {
                logger.info(`[UIMana.register] Registering ui: ${ui.name}`);
                this.registerdUIs[ui.name] = new ui.handler(this, ui);
                if (ui.default) {
                    this.defaultUI = ui;
                }
            }
        }
    }
}

exports.Manager = UIManager;
exports.Task = UITask;
exports.Base = UIBase;
exports.Layout = UILayout;
exports.View = UIView;