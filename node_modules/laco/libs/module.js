"use strict";

const path = require('path');
const async = require('async');
const _ = require('underscore');
const logger = require('./logger');
const helper = lacoLib('./libs/helper');

class Module {
    constructor(moduleDir, moduleName) {
        this.moduleName = moduleName || path.basename(moduleDir);
        this.moduleDir = moduleDir;
        this.moduleAlias = path.basename(moduleDir);
        this.moduleAction = null;
        this.viewsObj = {};
        this.basePath = '';
    }

    registerViews(views) {
        if(!_.isArray(views)) {
            logger.error(`[Module.registerViews]--> ${this.moduleName}: Invalid views array: `);
            logger.error(views);
            return;
        }
        async.map(views, (view, callback) => {
            if(!_.isString(view)) {
                logger.error(`[Module.registerViews]--> ${this.moduleName}: Invalid view item: `);
                logger.error(view);
                return callback(null, null);
            }

            let viewFile = path.join(this.moduleDir, `views/${view}.marko`);
            logger.info(`[Module.${this.moduleName}] Registering module view "${this.moduleName}": ${view}`);
            try {
                this.viewsObj[view] = require(viewFile);
                callback(null);
            }
            catch(e) {
                //logger.error(`[Module.registerViews]--> ${this.moduleName}: View '${view}' not found, with message: ${e.message}`);
                logger.error(`[Module.registerViews]--> ${this.moduleName}: Error registering view '${view}'`);
                logger.error(e.message);
                callback(null, null);
            }
        }, (err, _views) => {
            if(err) {
                logger.error(`[Module.registerViews]--> ${this.moduleName}: An error occured when registering module views: `);
                logger.error(err);
            }
        });
        
    }
    view(viewName, data, req, res) {
        let isPipe = !!req.pipedRequest;
        data._common.csrf_field = `<input type="hidden" name="_csrf" value="${req.csrfToken()}" />`;
        data._common.csrf_meta = `<meta name="_csrf" content="${req.csrfToken()}" />`;
        data._common.lacoFrontObj = JSON.stringify({
            basePath: this.basePath, 
            route: {}
        });
        data.$global = {
            paging: new helper.Paging(req.paging)
        };
        return isPipe ? this.viewsObj[viewName].render(data) : this.viewsObj[viewName].render(data, res);
    }
}

module.exports = Module;