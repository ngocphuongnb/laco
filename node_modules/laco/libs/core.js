"use strict";

require('marko/node-require');
const lasso = require('lasso')
const markoCompiler = require('marko/compiler');
const markoCompilerLookup = require('marko/compiler/taglib-lookup');
const markoExpress = require('marko/express');
const path = require('path');
const express = require('express');
const csrf = require('csrf');
const bodyParser = require('body-parser');
const compression = require('compression');
const connectFlash = require('connect-flash');
const session = require('express-session');
const expressPoweredBy = require('express-powered-by');
const helper = require('./helper');
const eventEmitter = require('./eventEmitter');
const extLoader = require('./ext_loader');
const logger = require('./logger');
const router = require('./router');
const admin = require('./admin');
const user = require('./user');
const nconf = require('nconf');

let laco = {};

let start = (laco) => {
    lasso.configure({
        plugins: [
            //'lasso-less',
            require.resolve('lasso-marko')
        ],
        outputDir: path.join(process.env.APP_ROOT, 'public/static'),
        urlPrefix: '/static',
        bundlingEnabled: false,
        minify: false,
        fingerprintsEnabled: false
    });
    let extsFile = path.join(process.env.APP_ROOT, 'laco_exts.json');
    markoCompiler.registerTaglib(require.resolve('../data/components/admin_components.json'));
    markoCompiler.registerTaglib(require.resolve('lasso/marko.json'));
    extLoader.loadInstalledExts(laco, extsFile, () => {
        eventEmitter.emit('laco.exts.loaded', laco);
        router.dispatch(laco.app);
        admin.init();
        laco.app.listen(nconf.get('APP_PORT'), () => {
            logger.info('Laco app running on port: ' + nconf.get('APP_PORT'));
        });
    });
}

let boot = () => {
    laco.csrf = new csrf();
    laco.express = express;
    laco.app = express();

    laco.app.enable('trust proxy');
    laco.app.use(bodyParser.json({limit: '50mb'}));
    laco.app.use(bodyParser.urlencoded({limit: '50mb', extended: true}));
    laco.app.enable('strict routing');
    laco.app.disable('x-powered-by');
    laco.app.use(expressPoweredBy('Node.js/NodeBlog 1.0.0'));
    laco.app.use(connectFlash());

    laco.app.use((req, res, next) => {
        if(req.method === 'GET') {
            laco.csrf.secret(function (err, secret) {
                if(!err) {
                    req.csrf_secret = secret;
                    req.csrf_token = laco.csrf.create(secret);
                }
                else {
                    logger.error('Cannot create app csrf secret!');
                    logger.error(err);
                }
                return next();
            });
        }
        else if(req.method === 'POST'){
            console.log(req.csrf_secret);
            console.log(req.body._csrf);
            if (!laco.csrf.verify(req.csrf_secret, req.body._csrf)) {
                res.status(403);
                res.end('Forbidden');
                return;
            }
            else res.end('success');
        }
        else return next();
    });

    laco.app.use(markoExpress());
    if(!nconf.get('APP_USE_PROXY')) laco.app.use('/', laco.express.static(path.join(process.env.APP_ROOT, 'public')))
    laco.nconf = nconf;
    eventEmitter.on('laco.start', () => {
        eventEmitter.emit('laco.start.preparing', laco);
        user.init();
        start(laco);
    });
};


exports.express = express;
exports.boot = boot;