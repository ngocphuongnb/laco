"use strict";

require('marko/node-require');
const lasso = require('lasso')
const markoCompiler = require('marko/compiler');
const markoCompilerLookup = require('marko/compiler/taglib-lookup');
const markoExpress = require('marko/express');
const path = require('path');
const express = require('express');
const csrf = require('csurf');
const nconf = require('nconf');
const cookieParser = require('cookie-parser')
const bodyParser = require('body-parser');
const compression = require('compression');
const connectFlash = require('connect-flash');
const session = require('express-session');
const expressPoweredBy = require('express-powered-by');
const helper = require('./helper');
const eventEmitter = require('./eventEmitter');
const extLoader = require('./ext_loader');
const logger = require('./logger');
const router = require('./router');
const admin = require('./admin');
const user = require('./user');
const packer = require('./packer');
const cli = require('./cli');

let laco = {};

let start = (laco) => {
    lasso.configure({
        plugins: [
            //'lasso-less',
            require.resolve('lasso-marko')
        ],
        outputDir: path.join(process.env.APP_ROOT, 'public/static'),
        urlPrefix: '/static',
        bundlingEnabled: false,
        minify: false,
        fingerprintsEnabled: false
    });
    let extsFile = path.join(process.env.APP_ROOT, 'laco_exts.json');
    markoCompiler.registerTaglib(require.resolve('../data/components/admin_components.json'));
    markoCompiler.registerTaglib(require.resolve('lasso/marko.json'));
    
    extLoader.loadInstalledExts(laco, extsFile, () => {
        eventEmitter.emit('laco.exts.loaded', laco);
        router.dispatch(laco.app);
        admin.init();
        laco.app.listen(nconf.get('APP_PORT'), () => {
            logger.info('Laco app running on port: ' + nconf.get('APP_PORT'));
        });
    });
}

let boot = () => {
    laco.express = express;
    laco.app = express();
    laco.csrfProtection = csrf({ cookie: true });
    laco.app.enable('trust proxy');
    laco.app.use(session({
        secret: 'EII68HXMGolwDiLqpmGZjhfamvU',
        resave: false,
        saveUninitialized: true,
        cookie: { secure: false },
        name: `laco.${helper.randomstring.generate(10)}.sid`
    }));
    laco.app.use(cookieParser());
    laco.app.use(bodyParser.json({limit: '50mb'}));
    laco.app.use(bodyParser.urlencoded({limit: '50mb', extended: true}));
    laco.app.enable('strict routing');
    laco.app.disable('x-powered-by');
    laco.app.use(expressPoweredBy('Node.js/NodeBlog 1.0.0'));
    laco.app.use(connectFlash());
    laco.app.use(markoExpress());
    laco.app.use((req, res, next) => {
        laco.csrfProtection(req, res, next);
    });
    laco.app.use((err, req, res, next) => {
        if (err.code !== 'EBADCSRFTOKEN') return next(err) 
        res.status(403)
        res.send('[CSRF token errors] form tampered with');
    });

    if(!nconf.get('APP_USE_PROXY')) laco.app.use('/', laco.express.static(path.join(process.env.APP_ROOT, 'public')))
    laco.nconf = nconf;
    eventEmitter.on('laco.start', () => {
        eventEmitter.emit('laco.start.preparing', laco);
        user.init();
        if (cli.isCommand('install')) return packer.install();
        if (cli.isCommand('update')) return packer.update();
        start(laco);
    });
};


exports.express = express;
exports.boot = boot;