"use strict";

require('marko/node-require');
const lasso = require('lasso')
const markoCompiler = require('marko/compiler');
const markoCompilerLookup = require('marko/compiler/taglib-lookup');
const markoExpress = require('marko/express');
const path = require('path');
const express = require('express');
const helper = require('./helper');
const eventEmitter = require('./eventEmitter');
const extLoader = require('./ext_loader');
const logger = require('./logger');
const router = require('./router');
const admin = require('./admin');
const user = require('./user');
const nconf = require('nconf');

let laco = {};

let start = (laco) => {
    lasso.configure({
        plugins: [
            //'lasso-less',
            require.resolve('lasso-marko')
        ],
        outputDir: path.join(process.env.APP_ROOT, 'public/static'),
        urlPrefix: '/static',
        bundlingEnabled: false,
        minify: false,
        fingerprintsEnabled: false
    });
    let extsFile = path.join(process.env.APP_ROOT, 'laco_exts.json');
    markoCompiler.registerTaglib(require.resolve('../data/components/admin_components.json'));
    markoCompiler.registerTaglib(require.resolve('lasso/marko.json'));
    extLoader.loadInstalledExts(extsFile, () => {
        eventEmitter.emit('laco.exts.loaded', laco);
        router.dispatch(laco.app);
        admin.init();
        laco.app.listen(nconf.get('APP_PORT'), () => {
            logger.info('Laco app running on port: ' + nconf.get('APP_PORT'));
        });
    });
}

let boot = () => {
    laco.express = express;
    laco.app = express();
    laco.app.use(markoExpress());
    if(!nconf.get('APP_USE_PROXY')) laco.app.use('/', laco.express.static(path.join(process.env.APP_ROOT, 'public')))
    laco.nconf = nconf;
    eventEmitter.on('laco.start', () => {
        eventEmitter.emit('laco.start.preparing', laco);
        user.init();
        start(laco);
    });
};


exports.express = express;
exports.boot = boot;