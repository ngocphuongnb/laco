"use strict";

const path = require('path');
const _ = require('underscore');
const nconf = require('nconf');
const helper = lacoLib('./libs/helper');
const Module = lacoLib('./libs/module');
const adminMenu = require('./menu');
const assetDependencies = require('./asset');
let theme = {
    layout: null
}

class AdminModule extends Module {
    constructor(moduleName) {
        theme.layout = lacoLib('./data/views/admin/default/layout_default.marko');

        let caller = helper.caller();
        let moduleDir = path.dirname(caller.getFileName());
        super(moduleDir, moduleName || caller.getFunctionName());

        this.dependencies = [];
    }
    registerMenus(menus) {
        adminMenu.add(menus);
    }

    addDepencencies(deps) {
        if(!_isArray(deps)) deps = [deps];
        _.each(deps, dep => this.dependencies.push(_.isString(dep) ? {path: dep, 'if-flag': `module-${this.moduleAlias}`} : dep));
    }

    link(action, parameters) {
        let params = [];
        if(!_.isObject(parameters)) parameters = {};
        let link = `/${nconf.get('APP_ADMIN_DIR')}/${this.moduleAlias}`;
        if(action) link += `/${action}`;
        _.each(parameters, (v, k) => params.push(`${k}=${v}`))
        if(!!params.length) link += '?' + parameters.join('&');
        return link;
    }
    view(viewName, data, req, res) {
        //if not piped request, add common dependencies
        _.each(assetDependencies.commonDependencies, dep => this.dependencies.push({path: dep, 'if-flag': 'laco-common'}));

        let caller = helper.caller();
        this.moduleAction = caller.getFunctionName();
        data._common = {};
        data._common.module = {
            name: this.moduleName,
            alias: this.moduleAlias,
            action: this.moduleAction,
            view: viewName
        }
        data._common.layout = theme.layout;
        data._common.dependencies = this.dependencies;
        data._common.pageFlags = [
            'laco-common',
            `module-${this.moduleAlias}`,
            `action-${this.moduleAction}`,
            `view-${viewName}`,
            `${this.moduleAlias}-${this.moduleAction}-${viewName}`
        ];
        super.view(viewName, data, req, res);
    }
}
module.exports = AdminModule;
