"use strict";

const path = require('path');
const _ = require('underscore');
const cheerio = require('cheerio')
const nconf = require('nconf');
const helper = lacoLib('./libs/helper');
const logger = lacoLib('./libs/logger');
const Module = lacoLib('./libs/module');
const adminMenu = require('./menu');
const assetDependencies = require('./asset');
let theme = {
    default_layout: null,
    pipe_layout: null
}

class AdminModule extends Module {
    constructor(moduleName) {
        theme.default_layout = lacoLib('./data/views/admin/default/layout_default.marko');
        theme.pipe_layout = lacoLib('./data/views/admin/default/layout_pipe.marko');

        let caller = helper.caller();
        let moduleDir = path.dirname(caller.getFileName());
        super(moduleDir, moduleName || caller.getFunctionName());

        this.dependencies = [];
        this.adminBasePath = `/${nconf.get('APP_ADMIN_DIR')}/`;
    }
    registerMenus(menus) {
        adminMenu.add(menus);
    }

    addDepencencies(deps) {
        if(!_isArray(deps)) deps = [deps];
        _.each(deps, dep => this.dependencies.push(_.isString(dep) ? {path: dep, 'if-flag': `module-${this.moduleAlias}`} : dep));
    }

    link(action, parameters) {
        let params = [];
        if(!_.isObject(parameters)) parameters = {};
        let link = `/${nconf.get('APP_ADMIN_DIR')}/${this.moduleAlias}`;
        if(action) link += `/${action}`;
        _.each(parameters, (v, k) => params.push(`${k}=${v}`))
        if(!!params.length) link += '?' + parameters.join('&');
        return link;
    }
    view(viewName, data, req, res) {
        //if not piped request, add common dependencies
        let isPipe = !!req.pipe;
        let viewDependencies = [];
        if(!isPipe) {
            viewDependencies = this.dependencies;
            _.each(assetDependencies.commonDependencies, dep => viewDependencies.push({path: dep, 'if-flag': 'laco-common'}));
        }
        else viewDependencies = [];

        let pipeFlag = isPipe ? 'laco-pipe' : 'laco-common';

        let caller = helper.caller();
        let adminBasePath = `/${nconf.get('APP_ADMIN_DIR')}/`;
        this.moduleAction = caller.getFunctionName();
        data._common = {};
        data._common.module = {
            name: this.moduleName,
            alias: this.moduleAlias,
            action: this.moduleAction,
            view: viewName
        }
        data._common.layout = (isPipe && theme.pipe_layout) ? theme.pipe_layout : theme.default_layout;
        data._common.dependencies = viewDependencies;
        data._common.pageFlags = [
            pipeFlag,
            `module-${this.moduleAlias}`,
            `action-${this.moduleAction}`,
            `view-${viewName}`,
            `${this.moduleAlias}-${this.moduleAction}-${viewName}`
        ];
        data._common.breadcrumbs = [
            {
                name: nconf.get('APP_ADMIN_DIR').capitalizeFirstChar(),
                path: this.adminBasePath
            },
            {
                name: this.moduleName,
                path: `${this.adminBasePath}${this.moduleAlias}`
            },
            {
                name: this.moduleAction.capitalizeFirstChar(),
                path: `${this.adminBasePath}${this.moduleAlias}/${this.moduleAction}`
            }
        ];
        let viewObj = super.view(viewName, data, req, res);
        if(isPipe) {
            viewObj
                .then(content => {
                    content = content.toString();
                    let scriptFiles = [];
                    let inlineScripts = [];
                    let $ = cheerio.load(content, {decodeEntities: true});
                    $('script').each((i, elem) => {
                        let scriptSrc = $(elem).attr('src');
                        if(scriptSrc) scriptFiles.push(scriptSrc);
                        else inlineScripts.push($(elem).text());
                        $(elem).remove();
                    });

                    let pipeHtml = !!$('body').length ? $('body').html().replace(/\n/g, '') : content;
                    let loadedObj = {
                        html: pipeHtml,
                        scriptFiles: scriptFiles,
                        inlineScripts: inlineScripts,
                        target: req.originalUrl.replace(`?pipe=${req.pipe}`, '').replace(`&pipe=${req.pipe}`, ''),
                        breadcrumbs: data._common.breadcrumbs
                    };
                    let html = `<script>var lacoLoadedPipe = ${JSON.stringify(loadedObj)};parent.pipeContentExtractor(lacoLoadedPipe);</script>`;
                    res.end(html);
                })
                .catch(e => {
                    logger.error(`[AdminModule.View.Pipe] Error render pipe view: ${e.message}`);
                    logger.error(e);
                    res.end('Error!!!');
                });
        }
    }
}
module.exports = AdminModule;
