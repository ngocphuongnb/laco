"use strict";

const _ = require('underscore');
const logger = lacoLib('./libs/logger');

let adminMenus = {};

let add = menus => {
    if(!_.isArray(menus)) menus = [menus];

    let defaultMenuItem = {
        name: '',
        anchor: '',
        parent: null,
        link: '',
        icon: '',
        priority: 0
    }

    _.each(menus, menuItem => {
        menuItem = _.extend(_.clone(defaultMenuItem), menuItem);
        if(adminMenus[menuItem.name]) return logger.error(`[Admin.menu] Menu item with name "${menuItem.name}" existed! Please remove it first!`);
        adminMenus[menuItem.name] = menuItem;
    });
};

let remove = menuName => {
    if(!adminMenus[menuName]) return logger.error(`[Admin.menu] Cannot remove non-existed menu item: ${menuName}`);
}

let toNested = () => {
    let clonedMenus = _.clone(adminMenus);
    let menus = {};

    let getChildMenus = parentName => {
        let childMenus = {};
        let originMenus = _.clone(clonedMenus);
        _.each(originMenus, menuItem => {
            if(menuItem.parent == parentName) {
                childMenus[menuItem.name] = menuItem;
                delete clonedMenus[menuItem.name];
                childMenus[menuItem.name].childs = getChildMenus(menuItem.name);
            }
        });
        let childMenuArray = _.sortBy(_.values(childMenus), 'priority').reverse();
        return childMenuArray;
    }

    return getChildMenus(null);
}

exports.add = add;
exports.remove = remove;
exports.toNested = toNested;