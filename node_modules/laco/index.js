'use strict';

const _ = require('lodash');
const path = require('path');
const http = require('http');
require('dotenv').config();
const express = require('express');
const socketIO = require('socket.io');
const logger = require('./libs/logger');
const router = require('./libs/router');
const subapp = require('./libs/subapp');
const helper = require('./libs/helper');
const Commander = require('./libs/commander');
const BaseController = require('./libs/controller/base');
const ExtManager = require('./libs/extension/manager');
const EventEmitter = require('./libs/EventEmitter');
const UIManager = require('./libs/ui').Manager;

class Laco extends EventEmitter {
    constructor(options = {}) {
        super();
        this.config(options);

        this.version = '0.0.1';
        this.app = this.options.app || express();
        this.app.use('/', express.static(path.join(APP_ROOT, 'public')));

        this.server = http.Server(this.app);
        this.socket = null;
        this.logger = logger;
        this.router = router;
        this.SubApp = subapp.Base;
        this.subAppManager = new subapp.SubAppManager(this);
        this.CMD = new Commander(this);
        this.ui = this.options.mvc.useUI ? new UIManager(this) : null;

        if (this.options.socket.enabled) {
            this.socket = socketIO(this.server, this.options.socket);
        }

        this.extManager = new ExtManager(this, this.options.extension);
        this.all(['ext.manager.initialized'], () => this.emit('ready'));
    }

    config(options = {}) {
        this.extensions = {
            loaded: [],
            enabled: [],
            disabled: []
        };
        this.options = _.merge({
            app: null,
            listen: {
                ip: '127.0.0.1',
                port: 3000,
                secure: false,
            },
            socket: {
                enabled: true,
                path: '/socket',
                serveClient: true,
                origins: '*:*'
            },
            mvc: {
                useUI: true,
            },
            extension: {
                autoLoad: true,
                autoUpdate: false,
                actions: {
                    route: ['read', 'register', 'unregister'],
                    midlleware: ['read', 'register', 'unregister'],
                    view: ['read', 'register', 'unregister'],
                    theme: ['read', 'register', 'unregister']
                }
            }
        }, options);
        global.APP_ROOT = process.env.APP_ROOT;
    }

    start() {
        if (this.CMD.isCommand('start')) {
            this.subAppManager.dispatch(this.app);
            this.server.listen(
                this.options.listen.port,
                this.options.listen.ip,
                () => {
                    logger.info(`[start] App running on port: ${this.options.listen.port}`);
                    this.emit('started', this);
                }
            );
        }
    }
}

exports.Laco = Laco;
exports.SubApp = subapp.Base;
exports.BaseController = subapp.BaseController;