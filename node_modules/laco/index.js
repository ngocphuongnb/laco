"use strict";
const path = require('path');
const dotenv = require('dotenv');
const nconf = require('nconf');
const requirement = require('./libs/requirement');
const logger = require('./libs/logger');
const core = require('./libs/core');

let init = appConfigFile => {
    logger.info('Laco is initializing...');
    dotenv.config({path: process.env.APP_ROOT + '/.env'});
    nconf.argv().env().file({ file: appConfigFile });

    logger.info('Laco is checking for requirements...');
    requirement.check({
        port: nconf.get('APP_PORT'),
        storage: nconf.get('STORAGE'),
        cache: nconf.get('CACHE')
    }, (err) => {
        if(err) return logger.error('Laco cannot start because an error occured: ' + err);
        requirement.dbInit({
            uri: nconf.get('DB_CONNECT_URI'),
            options: {}
        });
        core.boot();
    });
}

global.lacoLib = moduleFile => {
    return require(moduleFile);
}

exports.init = init;
