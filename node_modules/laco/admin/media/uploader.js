"use strict";

const path = require('path');
const multer = require('multer');
const mkdirp = require('mkdirp');
const helper = lacoLib('./libs/helper');
const mediaLib = lacoLib('./libs/media');
const provider = mediaLib.provider;
const optimizer = mediaLib.optimizer;

const getCurrentUploadDir = () => {
    let date = new Date();
    let year = date.getFullYear();
    let month = date.getMonth() + 1;
    month = (month < 10 ? "0" : "") + month;
    let day  = date.getDate();
    day = (day < 10 ? "0" : "") + day;
    return '/data/uploads/' + year + '/' + month + '/' + day;
}

let currentUploadDir = getCurrentUploadDir();

const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        let uploadPath = path.join(process.env.APP_ROOT, 'public', currentUploadDir);
        mkdirp(uploadPath, err => {
            cb(null, uploadPath);
        });
    },
    filename: (req, file, cb) => {
        let fns = file.originalname.split('.');
        let fileExt = fns.length > 1 ? '.' + fns.pop() : '';
        let fileName = fns.join('.');
        fileName = helper.cleanUrl(fileName) + fileExt;
        cb(null, Date.now() + '-' + fileName);
    }
});

let uploadHandler = (req, res, cb) =>  {
    currentUploadDir = getCurrentUploadDir();
    multer({storage: storage}).single('lacoFile')(req, res, err => {
        if(err) return cb(err);
        let fileName = req.file.originalname;
        let extName = path.extname(fileName);
        let bodyName = extName == '' ? fileName : fileName.substring(0, (fileName.length - extName.length));
        let userId = (req.session && req.session.user && req.session.user._id) ? req.session.user._id : null;
        let mediaData = {
            name:  bodyName,
            user: userId,
            description: '',
            alt: '',
            source: `${currentUploadDir}/${req.file.filename}`,
            encoding: req.file.encoding,
            mimetype: req.file.mimetype,
            size: req.file.size
        };
        optimizer.compressImage(req.file.path);
        provider.add(mediaData).then(_file => cb(null, _file)).catch(err => cb(err, null));
    });
};

exports.getCurrentUploadDir = getCurrentUploadDir;
exports.uploadHandler = uploadHandler;