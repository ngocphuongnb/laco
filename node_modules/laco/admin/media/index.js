"use strict";

const path = require('path');
const AdminModule = lacoLib('./libs/admin/module');
const logger = lacoLib('./libs/logger');
const media = lacoLib('./libs/media');
const globalAssetPath = path.join(LACO_ROOT, 'data/assets');
const uploader = require('./uploader');

class Media extends AdminModule {
    constructor(laco) {
        super();

        this.registerViews([
            'listing',
            'upload',
            'modal'
        ]);

        this.registerMenus([
            {
                name: 'media_main',
                anchor: 'Media',
                link: this.link(),
                icon: '<i class="zmdi zmdi-storage"></i>',
                priority: 1
            },
            {
                name: 'media_upload',
                parent: 'media_main',
                anchor: 'Upload',
                link: '/',
                icon: '<i class="zmdi zmdi-upload"></i>',
                priority: 1
            },
            {
                name: 'media_setting',
                parent: 'media_main',
                anchor: 'Setting',
                link: this.link('setting'),
                icon: '<i class="zmdi zmdi-settings"></i>'
            }
        ]);

        this.addDepencencies([
            path.join(globalAssetPath, 'vendors/dropzone-4.3.0/dropzone.min.css'),
            path.join(globalAssetPath, 'vendors/dropzone-4.3.0/basic.min.css'),
            path.join(globalAssetPath, 'vendors/dropzone-4.3.0/dropzone.min.js'),
            path.join(globalAssetPath, 'css/media.scss'),
            path.join(globalAssetPath, 'js/media.js'),
        ]);
    }

    main(req, res) {
        this.view('listing', {}, req, res);
    }

    modal(req, res) {
        let targetField = req.query.target || null;
        let isMulti = !!(1*req.query.multi) || false;
        this.view('modal', {
            targetField,
            isMulti,
            mediasProvider: media.provider.paging(req.paging.current)
        }, req, res, 'blank');
    }

    upload(req, res) {
        uploader.uploadHandler(req, res, (err, _file) => {
            if(err) {
                logger.error(`[Module.media.upload] Error uploading media: ${req.file}`);
                logger.error(req.file);
                logger.error(err);
            }

            res.json({
                status: err ? false : true,
                message: err ? err.message : 'File uploaded',
                result: _file || {}
            });
        });
    }
}
module.exports = Media;
