
function LacoPipe() {
    var self = {
        basePath: '',
        handlers: {},
        loaderIframe: null,
        currentTargetElm: null,
        currentState: null,
        historyStates: []
    };

    self.init = function() {
        if(!window.jQuery) return console.error('Jquery must be loaded before LacoPipe is initializing!');
        $('iframe#laco-pipe-loader').remove();
        $('body').append(
            $('<iframe />').css({
                border: 'none',
                width: 0,
                height: 0
            }).attr('id', 'laco-pipe-loader')
        );

        self.pipeContentExtractor = function(loadedPipe) {
            $('#laco-main-content').html(loadedPipe.html);
            if(loadedPipe.breadcrumbs) {
                $('#laco-admin-breadcrumb').html('');
                var breadcrumbsCount = loadedPipe.breadcrumbs.length - 1;
                for(var bi in loadedPipe.breadcrumbs) {
                    var br = loadedPipe.breadcrumbs[bi];
                    var classAttr = (breadcrumbsCount == bi) ? ' class=active' : '';
                    $('#laco-admin-breadcrumb').append('<li' + classAttr + '><a href="' + br.path + '">' + br.name + '</a></li>');
                }
            }

            LacoPipe.getMultiScripts(loadedPipe.scriptFiles, function() {
                window.history.pushState(null, null, loadedPipe.target);
                self.currentState = window.location;
                eval(loadedPipe.inlineScripts.join(';'));
                if(self.currentTargetElm) {
                    var parentUls = self.currentTargetElm.parents('ul');
                    $('li', parentUls).removeClass('active');
                    self.currentTargetElm.parents('li').addClass('active');
                }

                if(window.triggerPipeLoadedActions) triggerPipeLoadedActions();
            });
        };

        self.loaderIframe = $('#laco-pipe-loader');

        self.loadPipeContent = function(targetUrl, isSetHistory) {
            if(targetUrl[0] == '/') {
                if(isSetHistory) self.historyStates.push(window.location.pathname + window.location.search);
                var frameUrl = targetUrl + ( targetUrl.indexOf('?') > -1 ? '&' : '?' ) + 'pipe=main';
                self.loaderIframe.attr('src', frameUrl);
            }
        }

        window.onpopstate = function(event) {
            event.preventDefault();
            //var popStateTarget = (event && event.state) ? event.state.href : self.historyStates.pop();
            var popStateTarget = self.historyStates.pop();
            if(popStateTarget) {
                self.loadPipeContent(popStateTarget, false);
            }
            else event.preventDefault();
        };

        self.addHandler('link', {
            selector: 'a:not(.no-pipe):not(.pagination a)',
            exec: function(element, event) {
                self.currentTargetElm = $(element);
                var targetUrl = $(element).attr('href');
                self.loadPipeContent(targetUrl, true);
            }
        })
        self.listener();
    }

    self.addHandler = function(name, handler) {
        if(self.handlers[name]) return console.info('Laco handler existed: ' + name);
        self.handlers[name] = handler;
    }

    self.listener = function() {
        self.historyStates.push(window.location.href);
        self.currentState = window.location;
        for(name in self.handlers) {
            var handler = self.handlers[name];
            $(document).on('click', handler.selector, function(e) {
                e.preventDefault();
                handler.exec(this, e);
            });
        }
    }
    return self;
}
LacoPipe.getMultiScripts1 = function(arr, path) {
    var _arr = $.map(arr, function(scr) {
        return $.getScript( (path||"") + scr );
    });

    _arr.push($.Deferred(function( deferred ){
        $( deferred.resolve );
    }));

    return $.when.apply($, _arr);
}
LacoPipe.getMultiScripts = function(scripts, callback) {
    var totalScripts = scripts.length;
    var getSingleScript = function(i) {
        if(i < totalScripts) {
            $.getScript(scripts[i], function () {
                i++;
                getSingleScript(i);
            }).fail(function(e) {
                console.error('[Laco.pipe] Fail to load script: ' + scripts[i]);
                console.error(e);
            });
        }
        else callback();
    }
    getSingleScript(0);
}