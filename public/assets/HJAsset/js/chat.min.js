if (typeof window.HJChat === 'undefined') {
    function HJLogger(options) {
        this.name = 'HJLogger';
        if (typeof options == 'object') {
            Object.assign(this, options);
        }
    };
    HJLogger.prototype.info = function(msg, extra) {
        console.log('[' + this.name + ' ' + msg);
        if (extra) {
            console.log(extra);
        }
    };
    HJLogger.prototype.warn = function(msg, extra) {
        console.warn('[' + this.name + ' ' + msg, extra);
        if (extra) {
            console.warn(extra);
        }
    };
    HJLogger.prototype.error = function(msg, extra) {
        throw new Error('[' + this.name + ' ' + msg + ' ' + JSON.stringify(extra));
        if (extra) {
            console.error(extra);
        }
    };

    function HJChat(options) {
        if (typeof jQuery == 'undefined') {
            this.logger('jQuery is required for HJChat to run...')
        }
        if (typeof io == 'undefined') {
            this.logger('SocketIO is required for HJChat to run...')
        }
        if (typeof options !== 'undefined' && typeof options != 'object') {
            return this.logger.error('Invalid options:', options);
        }
        this.options = Object.assign(this.options, options);
    }

    HJChat.logger = new HJLogger({ name: 'HJChatLogger' });
    HJChat.prototype.logger = new HJLogger({ name: 'HJChat' });
    HJChat.prototype.options = {
        'socket.host': window.location.origin,
        'socket.path': '/socket',
        'socket.resource': '/socket',
        'ui.conversation.trigger': '.hjchat-conversation-trigger',
        'ui.conversation.trigger_id_prefix': 'hjdicussionitem-',
        'ui.conversation.user_info': function(identity, userIdt, conversationElm) {},
        'ui.conversation.load_msg': function(identity, userIdt, conversationElm) {},
        'ui.conversation.wrapper': '.hjchat-msg-wrapper',
        'ui.conversation.template': '.hjchat-msg-template',
        'ui.conversation.item_class': 'hjchat-conversation-item',
        'ui.conversation.id_prefix': 'hj-conversation-',
        'ui.form': 'form.hjchat-form',
        'ui.form.input': '.hjchat-input',
        'ui.msg.list': '.hjchat-msgs',
        'ui.msg.template': function(msg) {},
    };
    HJChat.prototype.config = function(options) {
        if (typeof options !== 'object') {
            return this.logger.error('[Config] Invalid options:', options);
        }
        this.options = Object.assign(this.options, options);
    }

    HJChat.prototype.socket = null;
    HJChat.prototype.events = {};
    HJChat.prototype.loadedConversations = {};

    HJChat.prototype.isLoadedConversation = function(identity) {
        return this.loadedConversations[identity] ? true : false;
    }

    HJChat.prototype.init = function() {
        var _this = this;

        if ($(this.options['ui.conversation.template']).length) {
            $(this.options['ui.conversation.template']).hide();
        }

        this.socket = io(this.options['socket.host'], {
            path: this.options['socket.path'],
            resource: this.options['socket.resource']
        });
        this.socket.on('connect', function() {
            _this.listen();
        });
    }

    HJChat.prototype.listen = function() {
        var _this = this;
        var currentHash = window.location.hash.replace('#', '');
        if (currentHash) {
            this.openConversation(currentHash);
        }

        $(document).on('click', this.options['ui.conversation.trigger'], function(event) {
            var identity = $(this).data('identity') || $(this).attr('id').replace(_this.options['ui.conversation.trigger_id_prefix'], '');
            event.preventDefault();
            _this.openConversation(identity);
        });

        $(document).on('submit', this.options['ui.form'], function(event) {
            event.preventDefault();
            var inputField = $(_this.options['ui.form.input'], $(this));
            var msg = inputField.val();
            var identity = $(this).data('identity');

            if (!identity) {
                return _this.logger.error('Invalid chat identity');
            }

            if (msg) {
                _this.socket.emit(_this.events.CREATE_CHAT_MSG, {
                    identity: identity,
                    userIdt: _this.options.userIdt,
                    msg: msg
                });
            }
            inputField.val('');
            return false;
        });

        _this.socket.on(_this.events.NEW_CHAT_MSG, function(data) {
            var msg = data.msg;
            var identity = data.identity;

            if (typeof _this.options['ui.msg.template'] == 'string') {
                msg = _this.options['ui.msg.template'].replace(/@msg/g, msg)
            }

            if (typeof _this.options['ui.msg.template'] == 'function') {
                msg = _this.options['ui.msg.template'](data);
            }

            $('#' + _this.options['ui.conversation.id_prefix'] + identity + ' ' + _this.options['ui.msg.list']).append(msg);
            _this.scrollToBottom(identity);
        });
    }

    HJChat.prototype.scrollToBottom = function(identity) {
        var elementid = this.options['ui.conversation.id_prefix'] + identity;
        $('#' + elementid).scrollTop($('#' + elementid)[0].scrollHeight);
    }

    HJChat.prototype.openConversation = function(identity, triggerElm) {
        var _this = this;
        $(this.options['ui.form']).data('identity', identity);

        var currentHash = window.location.hash.replace('#', '');

        if (currentHash != identity) {
            window.location.hash = '#' + identity;
        }

        if (!this.isLoadedConversation(identity)) {
            this.socket.emit('identity', identity);

            var conversationElm = $(this.options['ui.conversation.template']).clone();
            conversationElm.attr('id', this.options['ui.conversation.id_prefix'] + identity);
            conversationElm.addClass(this.options['ui.conversation.item_class']);
            conversationElm.removeClass(this.options['ui.conversation.template'].replace(/[\.#]/g, ''));
            $(this.options['ui.conversation.wrapper']).append(conversationElm);
            this.options['ui.conversation.user_info'](identity, this.options.userIdt, $(this.options['ui.msg.list'], conversationElm));
            this.options['ui.conversation.load_msg'](identity, this.options.userIdt, $(this.options['ui.msg.list'], conversationElm), function() {
                _this.scrollToBottom(identity);
            });
            this.loadedConversations[identity] = true;
        }

        $('.' + this.options['ui.conversation.item_class']).hide();
        $('#' + this.options['ui.conversation.id_prefix'] + identity).show();
        $(this.options['ui.conversation.trigger']).removeClass('active');
        $('[data-identity="' + identity + '"]').addClass('active');
        $(this.options['ui.conversation.trigger_id_prefix'] + identity).addClass('active');

        $(this.options['ui.form.input'], $(this.options['ui.form'])).focus();
    }
}
'use strict';

var HJChatEvents = {
    CREATE_CHAT_MSG: 'create_chat_msg',
    NEW_CHAT_MSG: 'new_chat_msg'
}

if (typeof window !== 'undefined' && HJChat != 'undefined') {
    HJChat.prototype.events = Object.assign(HJChat.prototype.events, HJChatEvents);
}

if (typeof exports == 'object') {
    exports.ChatEvents = HJChatEvents;
}
$(function() {
    let renderMsg = function(msg) {
        var user = hjChatPreloadedUsers[msg.userid] || { fullname: 'No Name' };
        var dateObj = new Date(msg.created_date);
        var tpl = '<li>\
            <div class="hj-chat-msg-item">\
                <span class="hj-chat-user">' + (user.fullname || user.username) + '</span>\
                <span class="hj-chat-msg-content">' + msg.content + '</span>\
            </div>\
            <div class="hj-chat-meta">' + dateObj.toLocaleString() + '</div>\
        </li>';
        return tpl;
    }
    var hjchat = new HJChat({
        'userIdt': hjChatUserIdentity,
        'ui.msg.template': renderMsg,
        'ui.conversation.user_info': function(identity, userIdt, conversationElm) {},
        'ui.conversation.load_msg': function(identity, userIdt, conversationElm, cb) {
            $.ajax({
                type: 'POST',
                url: hjMsgLoadEndpoint,
                data: { identity: identity, userIdt: userIdt },
                success: function(res) {
                    if (res.status) {
                        for (var i in res.data) {
                            var msg = res.data[i];
                            conversationElm.append(renderMsg(msg));
                        }
                        cb();
                    }
                }
            });
        },
    });
    hjchat.init();
});